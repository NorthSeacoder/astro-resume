{
    "about": {
        "bio": "拥有 8 年前端开发经验与4年团队管理经验，专注于中后台系统架构设计与工程化建设，参与或主导过十余个大型中后台系统的开发与重构。曾带领3-5人前端团队，协助技术方案选型、代码质量管控与团队技术培养，团队整体效率得到一定提升。在前端技术栈升级与标准化方面做过一些尝试，构建过组件库与工具链，保障项目交付质量与可维护性。",
        "stats": {
            "yearsExperience": "8+",
            "projectsCompleted": 20,
            "happyClients": 15,
            "yearsDescription": "前端开发与团队管理经验",
            "projectsDescription": "大型中后台系统开发",
            "clientsDescription": "跨行业客户合作"
        },
        "keyPoints": [
            "拥有 8 年前端开发经验与4年团队管理经验，参与和主导过多个中后台系统架构设计与工程化建设，具备从0到1构建系统的实践经验。",
            "曾带领小型前端团队，负责技术选型、代码规范制定与质量把控，通过技术沉淀与工具开发提升团队整体效率。",
            "设计并实施过前端技术栈升级方案，包括微前端架构转型、Monorepo工程体系构建，解决大型应用维护与协同开发难题。"
        ]
    },
    "skills": {
        "categories": [
            {
                "id": 1,
                "name": "前端基础技术",
                "icon": "Code",
                "skills": [
                    {
                        "name": "JavaScript/TypeScript",
                        "level": "Expert",
                        "description": "8年JavaScript开发经验，熟悉ES6+特性及常见设计模式，理解异步编程模型。4年TypeScript实践经验，在大型项目中应用类型系统提升代码健壮性，熟练使用高级类型和类型推导优化开发体验。",
                        "percentage": 95,
                        "keywords": ["ES6+", "TypeScript", "HTML5", "CSS3"]
                    },
                    {
                        "name": "React生态",
                        "level": "Expert",
                        "description": "6年React项目经验，经历了从Class组件到Hooks的完整演进过程。深入研究过React核心原理，熟悉虚拟DOM、Fiber架构等内部机制。在OA系统中实践过大型表单渲染优化，采用虚拟列表和懒加载等技术将渲染时间优化70%以上。",
                        "percentage": 95,
                        "keywords": ["React", "Hooks", "Redux", "性能优化"]
                    },
                    {
                        "name": "Vue生态",
                        "level": "Expert",
                        "description": "参与过Vue 2/3项目开发，在印尼版OA中应用Vue技术栈实现快速本地化开发。了解Vue响应式原理，使用过Composition API重构复杂组件逻辑，参与过内部Vue组件库的开发与维护工作。",
                        "percentage": 90,
                        "keywords": ["Vue", "Vuex", "Vue Router", "组件库"]
                    },
                    {
                        "name": "性能与网络",
                        "level": "Expert",
                        "description": "深入理解浏览器渲染机制、V8引擎优化，具备复杂Web应用性能优化经验，包括资源加载、渲染性能、网络传输等多个层面。",
                        "percentage": 90,
                        "keywords": ["性能优化", "浏览器原理", "HTTP优化", "资源加载"]
                    },
                    {
                        "name": "UI组件开发",
                        "level": "Expert",
                        "description": "主导开发多个企业级组件库，包括基于antd的二次开发和自研组件，擅长高性能表格、虚拟列表等复杂组件的设计与实现。",
                        "percentage": 90,
                        "keywords": ["组件库", "antd", "性能组件", "设计系统"]
                    }
                ]
            },
            {
                "id": 2,
                "name": "工程化体系",
                "icon": "Zap",
                "skills": [
                    {
                        "name": "构建与优化",
                        "level": "Expert",
                        "description": "实际主导过多个大型项目的构建优化，将OA系统构建时间从8分钟优化至3分钟。熟悉Webpack配置优化技巧，如持久化缓存、多线程构建等；在近期项目中引入Vite提升开发体验，本地开发服务器启动时间减少70%。",
                        "percentage": 95,
                        "keywords": ["Webpack", "Vite", "Rollup", "构建优化"]
                    },
                    {
                        "name": "工程化工具链",
                        "level": "Expert",
                        "description": "设计并实现完整的前端工程化体系，包括CLI工具、代码规范、自动化测试、CI/CD流程，有效提升团队开发效率。",
                        "percentage": 90,
                        "keywords": ["CLI", "ESLint", "自动化测试", "CI/CD"]
                    },
                    {
                        "name": "Monorepo工程",
                        "level": "Expert",
                        "description": "在OA系统迭代过程中主导引入pnpm+Turborepo的Monorepo架构，解决了多产品线代码共享与独立部署的难题。设计过packages结构和工作流程，实现高效的依赖管理和增量构建。",
                        "percentage": 90,
                        "keywords": ["Monorepo", "pnpm", "turborepo", "工程化"]
                    },
                    {
                        "name": "微前端架构",
                        "level": "Advanced",
                        "description": "在技术栈升级过程中设计并实施基于qiankun的微前端方案，实现新旧系统的平滑过渡。解决了路由集成、应用通信、样式隔离等关键问题，成功将系统从React 16/AntD 4升级至React 18/AntD 5。",
                        "percentage": 85,
                        "keywords": ["微前端", "qiankun", "应用集成", "技术升级"]
                    },
                    {
                        "name": "自动化工具开发",
                        "level": "Expert",
                        "description": "开发VSCode插件、Figma插件等提效工具，设计AST代码转换工具，有效提升开发效率和代码质量。",
                        "percentage": 90,
                        "keywords": ["VSCode插件", "Figma插件", "AST", "代码转换"]
                    }
                ]
            },
            {
                "id": 3,
                "name": "专业领域技术",
                "icon": "BrainCircuit",
                "skills": [
                    {
                        "name": "企业微信应用开发",
                        "level": "Expert",
                        "description": "主导企业微信应用从0到1的架构设计，采用Monorepo管理PC与移动端代码，实现70%业务逻辑复用。解决了企业微信环境下的鉴权、缓存、弱网优化等技术难题，提升用户体验。",
                        "percentage": 90,
                        "keywords": ["企业微信JSSDK", "小程序", "H5应用", "多端开发"]
                    },
                    {
                        "name": "数据可视化",
                        "level": "Advanced",
                        "description": "在多个项目中应用ECharts实现数据可视化需求，在WP系列项目中基于Pixi.js开发高性能图形编辑功能。解决了大量图形元素渲染与交互的性能挑战，支持千级别元素的流畅操作。",
                        "percentage": 85,
                        "keywords": ["ECharts", "Pixi.js", "图形渲染", "交互设计"]
                    },
                    {
                        "name": "国际化体系",
                        "level": "Expert",
                        "description": "设计并实现完整的前端国际化解决方案，包括多语言管理、文案维护、动态语言包加载、本地化适配等。",
                        "percentage": 90,
                        "keywords": ["i18next", "多语言", "本地化", "文案管理"]
                    },
                    {
                        "name": "前端监控",
                        "level": "Advanced",
                        "description": "在OA系统中集成Sentry错误监控和Web Vitals性能指标采集，构建Grafana可视化监控面板。通过监控体系及时发现并解决线上问题，主动优化用户体验，关键性能指标得到稳定控制。",
                        "percentage": 85,
                        "keywords": ["性能监控", "错误追踪", "用户行为", "监控告警"]
                    }
                ]
            }
        ]
    },
    "experiences": [
        {
            "id": 1,
            "company": "北京瓴岳科技",
            "position": "前端开发工程师",
            "location": "北京",
            "period": "2019年3月 - 至今",
            "description": "负责基于React和Vue技术栈的复杂系统前端架构设计与性能优化，带领前端团队推动技术升级与规范化，设计开发高复用性组件库与工具链以提升开发效率。",
            "items": [
                {
                    "id": "oa-1",
                    "title": "国内OA（React）",
                    "type": "OA系统及衍生产品线",
                    "category": "业务系统相关",
                    "period": "2020年3月 - 至今",
                    "position": "架构师",
                    "summary": "基于React、Webpack、Vite、WebSocket、Ant Design、i18next、Redux、Redux-Saga的高性能OA系统前端开发，主导性能优化与国际化、可视化配置、WebSocket优化、安全加固、构建优化、性能监控等。",
                    "achievements": [
                        {
                            "id": "star-101",
                            "title": "列表性能优化",
                            "situation": "系统核心模块存在大型列表（超过1000行），初始渲染时间严重（约3秒），影响用户操作效率。",
                            "task": "将表单渲染时间控制在1秒内。",
                            "action": "调研并选型虚拟列表和图片/组件懒加载技术；使用React Profiler精准定位渲染瓶颈；重构表单组件实现按需渲染；使用react-lazy-with-preload代替原生React.lazy实现路由组件预加载，解决首次访问页面加载缓慢问题。",
                            "result": "大型列表平均渲染时间从3秒降至800毫秒，性能提升73%；组件路由切换时间降低40%，用户反馈操作流畅度显著提高。"
                        },
                        {
                            "id": "star-102",
                            "title": "多语言支持方案",
                            "situation": "业务拓展需要支持多语言环境，现有架构缺乏国际化支持能力。",
                            "task": "设计并实现稳健、易扩展的多语言解决方案。",
                            "action": "引入i18next库，构建基于JSON的动态语言包按需加载机制；配置fallback机制确保在特定语言翻译缺失时自动显示默认语言文本，避免界面出现空白；对日期、货币等格式进行本地化处理，同时实时监控代码中fallback触发情况，保证翻译覆盖率。",
                            "result": "成功支持4种语言，因翻译缺失导致的界面显示错误减少95%；监控系统准确率达99%，提前发现并修复200+潜在翻译问题，保障全球用户基础使用体验。"
                        },
                        {
                            "id": "star-103",
                            "title": "工位图配置流程优化",
                            "situation": "原有工位图配置流程繁琐（行政人员提供平面图和Excel表格 -> UI设计 -> 前端开发），每次配置耗时达4人日（设计2天+前端2天）。",
                            "task": "分步骤优化工位图配置流程，提高配置效率，降低技术门槛。",
                            "action": "第一阶段：开发Figma插件替代Excel表格手工计算坐标，设计师直接在设计稿中标记工位点，插件自动提取坐标生成配置，节省前端开发时间；第二阶段：构建完整可视化配置工具，使行政人员能直接在平台上绘制和配置工位图，不再依赖设计和开发。",
                            "result": "工位图配置流程从\"行政（平面图+Excel表格0.5人日）+ 设计（2人日）+ 前端（2人日）\"先降至\"行政（0.5人日）+ 设计（2人日）+ 前端（0.5人日）\"，再降至\"行政人员可视化配置（0.5人日）\"，项目总耗时从4.5人日降至0.5人日，配置错误率显著下降。"
                        },
                        {
                            "id": "star-104",
                            "title": "WebSocket实时功能优化",
                            "situation": "WebSocket长连接在复杂网络环境下存在断连和高延迟问题，影响实时功能体验。",
                            "task": "提高WebSocket通信稳定性和效率，扩展其实际应用场景。",
                            "action": "实现指数退避自动重连策略；使用MessagePack对传输数据进行二进制压缩；在客户端和服务端都增加心跳检测和超时处理机制；落地两个核心应用场景：1）后端实时推送消息通知和任务变更；2）前端创建/编辑核心配置时触发所有在线用户数据刷新机制。",
                            "result": "平均消息延迟降低40%，带宽使用降低25%；WebSocket连接成功率稳定在99.5%以上；数据同步延迟从平均30秒（原需用户手动刷新）降至2秒（自动更新推送），实时功能投诉率降低80%。"
                        },
                        {
                            "id": "star-105",
                            "title": "前端安全增强",
                            "situation": "OA系统涉及敏感数据，需要增强前端安全防护能力。",
                            "task": "识别并修复潜在前端安全漏洞，建立安全规范。",
                            "action": "实施严格的Content Security Policy(CSP)防御XSS攻击；对所有用户输入进行HTML实体转义和类型校验；引入CSRF Token机制防止跨站请求伪造；开发动态水印功能，在敏感页面自动生成包含用户ID和登录时间的半透明水印，防止信息泄露和截图传播；定期进行安全扫描和代码审计。",
                            "result": "通过第三方安全渗透测试，前端安全风险评分提升85%，未发现高风险漏洞；水印功能有效降低敏感信息泄露风险，信息安全事件减少70%。"
                        },
                        {
                            "id": "star-106",
                            "title": "构建优化与开发体验提升",
                            "situation": "随着项目复杂度增加，Webpack构建时间过长（超过5分钟），本地开发热更新(HMR)缓慢。",
                            "task": "缩短生产环境构建时间，提高本地开发效率。",
                            "action": "优化Webpack配置：启用tree-shaking、代码拆分；使用thread-loader或parallel-webpack进行多核并行编译；本地开发服务器切换为Vite，利用其基于原生ESM的快速冷启动和HMR能力。",
                            "result": "生产环境构建时间缩短35%；本地开发启动时间缩短90%。"
                        },
                        {
                            "id": "star-107",
                            "title": "性能监控体系搭建",
                            "situation": "缺乏系统性前端性能监控，难以主动发现和定位线上性能问题。",
                            "task": "搭建前端性能监控体系，量化用户体验。",
                            "action": "集成Sentry进行错误监控和Session Replay用户行为回放；将Web Vitals指标（LCP、FID、CLS）和自定义业务指标上报至Grafana，建立可视化监控面板。",
                            "result": "实现关键页面性能指标（如FMP P95）实时监控，稳定控制在3.5秒内，主动发现并解决的性能问题比例提升60%。"
                        }
                    ]
                },
                {
                    "id": "oa-2",
                    "title": "企业微信应用",
                    "type": "OA系统及衍生产品线",
                    "category": "业务系统相关",
                    "period": "",
                    "position": "架构师",
                    "summary": "同时支持PC Web与企业微信移动端的跨平台应用设计开发，主导跨端架构、性能优化与代码复用。",
                    "achievements": [
                        {
                            "id": "star-108",
                            "title": "跨平台技术架构设计",
                            "situation": "公司需要开发同时支持PC Web和企业微信移动端的应用系统。",
                            "task": "从零设计构建高复用性的跨平台技术架构。",
                            "action": "采用pnpm实现Monorepo架构进行多包项目管理；基于React、UMI、Tailwind CSS、react-query、Zustand构建技术栈；从项目一开始就建立严格的跨平台组件设计规范和ESLint规则强制执行；提取并规范化30+跨平台业务Hooks和10+响应式公共UI组件，发布至内部npm。",
                            "result": "成功实现PC与移动端之间70%核心业务逻辑和UI组件代码复用，新功能平均开发周期缩短30%，达到高度代码复用，减少40%开发工作量，提高代码一致性和可维护性。"
                        },
                        {
                            "id": "star-109",
                            "title": "移动端性能优化",
                            "situation": "部分页面（尤其在移动弱网环境下）首次加载白屏时间长。",
                            "task": "优化页面加载性能，减少白屏时间。",
                            "action": "利用react-query的缓存和后台更新机制实现数据预加载和状态保持；优化代码分割策略，按需加载非关键资源；合理利用HTTP缓存（Cache-Control、ETag）。",
                            "result": "关键页面平均白屏时间降低50%，Grafana监控显示数据加载P95时间降低35%。"
                        }
                    ]
                },
                {
                    "id": "oa-3",
                    "title": "印尼OA（Vue）",
                    "type": "OA系统及衍生产品线",
                    "category": "业务系统相关",
                    "period": "",
                    "position": "核心开发",
                    "summary": "快速开发针对印尼市场的本地化OA系统，聚焦本地化适配与网络性能优化。",
                    "achievements": [
                        {
                            "id": "star-110",
                            "title": "快速本地化开发",
                            "situation": "需要在短时间内为印尼市场推出OA系统，功能上与国内版相似但需要进行本地化适配。",
                            "task": "基于国内React版经验，使用Vue技术栈快速完成印尼版的开发和本地化工作。",
                            "action": "采用Vue 2、Webpack、Ant Design Vue(antdv)技术栈；复用国内版的设计和架构思路；重点开发符合印尼用户习惯的日期和数字格式化组件；基于tiptap封装antdv富文本编辑器组件满足业务需求。",
                            "result": "在2个月内成功上线印尼版OA系统，富文本编辑模块开发效率相比直接使用原生tiptap提升65%。"
                        },
                        {
                            "id": "star-111",
                            "title": "印尼网络环境优化",
                            "situation": "印尼当地网络基础设施相对薄弱，导致访问速度慢。",
                            "task": "针对印尼网络环境进行专项性能优化。",
                            "action": "实施全面网络传输优化：启用HTTP/2协议；内联关键CSS，异步加载非首屏CSS；采用响应式图片(srcset)和WebP格式；配置CDN全球加速和边缘缓存。",
                            "result": "印尼用户访问系统的首次有效绘制（FMP）时间从平均3.5秒降至1.2秒，性能提升60%；通过BrowserStack测试确保在当地主流浏览器（Chrome、Firefox、UC Browser）上99%兼容性。"
                        }
                    ]
                },
                {
                    "id": "oa-4",
                    "title": "前端工程体系升级",
                    "type": "OA系统及衍生产品线",
                    "category": "业务系统相关",
                    "period": "",
                    "position": "架构师",
                    "summary": "面对OA/OMS/KMG等多个紧耦合的大型单体应用，设计并实施基于pnpm+Turborepo的Monorepo架构，采用微前端方案实现渐进式升级，成功将CI构建时间从8分钟缩短60%，使各产品线获得独立迭代能力。",
                    "achievements": [
                        {
                            "id": "star-112",
                            "title": "Monorepo架构重构",
                            "situation": "系统能力与演进迟缓：当前OA是一个大型单体应用，衍生出OMS/ECOMS/KMG等变体，代码耦合导致迭代效率低下、维护成本高昂、CI/CD效率低下（每次构建需8分钟）。",
                            "task": "重构系统架构，提高模块独立性和复用性，支持各产品线快速迭代。",
                            "action": "精心设计三阶段拆分方案：1) 基于pnpm+Turborepo初始化Monorepo，将OMS相关代码剥离至packages/oms，提取共享代码至shared-core和shared-legacy-ui；2) 创建现代技术栈的oms-next（React 18/AntD 5），配置微前端方案集成旧oms；3) 基于slimfit组件库，按模块逐步重写替换旧功能。",
                            "result": "平均项目构建时间缩短50%，各产品线可独立迭代发布，共享模块变更自动同步至依赖项目，降低维护成本。"
                        },
                        {
                            "id": "star-113",
                            "title": "微前端渐进式迁移",
                            "situation": "系统技术栈老旧（React 16/AntD 4），需要升级到现代技术栈（React 18/AntD 5），但不能中断业务运行，必须平滑过渡。",
                            "task": "设计渐进式迁移方案，确保平滑过渡。",
                            "action": "评估并采用qiankun微前端框架（对比MF和内部方案），配置oms-next作为主应用，旧oms为子应用；设计路由集成方案，按模块/页面逐步替换策略；构建主子应用通信机制，确保跨应用数据一致性；设计完整测试用例验证新旧系统整合的稳定性。",
                            "result": "成功实现渐进式迁移，新架构上线后系统性能提升40%，前端开发效率提升30%。"
                        },
                        {
                            "id": "star-114",
                            "title": "技术债务清理",
                            "situation": "系统历史悠久，积累大量技术债务：存在多个版本组件库并存、Class组件和函数式组件混用、两版权限校验函数、大量条件判断语句等，导致维护成本高，功能迭代缓慢。",
                            "task": "系统性清理技术债务，提高代码质量和可维护性。",
                            "action": "采用结构化方法管理变体差异（基于.env和config.ts取代if/else条件判断）；将复杂业务逻辑剥离至共享包（shared-core/shared-legacy-ui）；清理多版本组件库，统一到Slimfit；重构权限校验体系，升级为支持数据权限点和角色判断；编写自动化代码转换脚本批量重构旧代码。",
                            "result": "代码仓库体积减少30%，组件调用一致性提高90%，权限判断逻辑错误减少85%，开发人员理解和修改权限相关代码的时间缩短70%。"
                        }
                    ]
                },
                {
                    "id": "wp-1",
                    "title": "WP系列项目",
                    "category": "业务系统相关",
                    "period": "2022年1月 - 至今",
                    "position": "前端主程",
                    "summary": "基于React、UMI、Tailwind CSS开发的复杂图形显示与编辑功能，主导高性能渲染、复杂交互与组件复用。",
                    "achievements": [
                        {
                            "id": "star-120",
                            "title": "高性能图形渲染",
                            "situation": "项目需要开发停车位地图、仓位图等复杂图形配置界面，要求高性能渲染和交互。",
                            "task": "实现高性能、可配置的图形显示和编辑功能。",
                            "action": "基于React、UMI、Tailwind CSS开发；复用并扩展OA项目中基于Pixi.js的图形渲染引擎经验，优化大数据量下的渲染性能。",
                            "result": "成功交付停车位地图和仓位图配置功能，支持1000+图形元素的流畅显示和交互。"
                        },
                        {
                            "id": "star-121",
                            "title": "复杂交互优化",
                            "situation": "图形编辑界面需要支持框选和拖拽大规模元素等复杂交互，性能要求高。",
                            "task": "实现高性能框选和多元素操作功能。",
                            "action": "优化框选算法，使用requestAnimationFrame节流重绘操作；对大规模元素操作进行批处理和异步化，避免阻塞UI线程。",
                            "result": "实现流畅的框选体验，支持同时操作1000+元素，用户操作效率提升50%，Grafana监控显示交互响应时间P95稳定在200毫秒内。"
                        }
                    ]
                },
                {
                    "id": "fin-1",
                    "title": "资金/财务/风控系统",
                    "category": "业务系统相关",
                    "period": "2019年6月 - 2021年12月",
                    "position": "前端负责人",
                    "summary": "从零构建满足金融业务需求的资金、财务和风控系统，主导前端架构、组件迁移与业务组件封装。",
                    "achievements": [
                        {
                            "id": "star-130",
                            "title": "金融应用安全开发",
                            "situation": "从零构建资金、财务和风控系统，满足金融业务需求。",
                            "task": "作为前端负责人，主导系统前端的技术选型、架构设计和核心功能开发。",
                            "action": "确定使用Vue 2和内部Base-UI组件库作为基础技术栈；遵循前端安全最佳实践（输入验证、输出编码、HTTPS等）进行开发。",
                            "result": "系统按计划成功上线，通过内部安全部门审核，满足金融级应用安全要求，上线后1年内无重大安全事件。"
                        },
                        {
                            "id": "star-131",
                            "title": "组件库迁移工具",
                            "situation": "公司技术栈升级需要将旧系统UI从Base-UI迁移到新标准组件库@yqg/antd。",
                            "task": "高效准确完成UI组件库迁移工作。",
                            "action": "分析两个组件库的API差异，开发基于AST（抽象语法树）的代码转换工具，自动识别并替换旧组件用法为新组件API调用。",
                            "result": "工具自动完成80%以上页面迁移工作量，整体迁移周期缩短50%，减少大量重复手工操作。"
                        },
                        {
                            "id": "star-132",
                            "title": "业务组件封装",
                            "situation": "系统中存在大量结构相似的CRUD页面，开发效率需要提升。",
                            "task": "提高基础页面的开发效率和性能。",
                            "action": "封装页面级业务组件（如搜索表单、数据表格、弹窗表单），规范化开发流程。",
                            "result": "基础CRUD页面开发效率提升50%，核心报表页面加载和交互性能提升35%。"
                        }
                    ]
                },
                {
                    "id": "inf-1",
                    "title": "Slimfit组件库",
                    "type": "基础设施建设",
                    "category": "基础设施相关",
                    "period": "2023年4月 - 至今",
                    "position": "架构师",
                    "summary": "面对公司内多个B端产品UI风格不统一、组件重复开发的痛点，设计并构建基于antd 5的企业级React组件库，融入公司设计规范，创新实现主题引擎、图标系统、字体规范和Tailwind集成方案，显著提升内部开发效率。",
                    "achievements": [
                        {
                            "id": "inf-1-1",
                            "title": "统一设计规范",
                            "situation": "公司B端产品UI停留在AntD 4时代，视觉风格陈旧；各团队重复进行样式定制，效率低下且易出错；特定设计规范（色板、字体、图标体系）难以系统性落地。",
                            "task": "主导建设公司新一代标准React组件库Slimfit，统一设计规范。",
                            "action": "设计创新的主题引擎，将设计规范注入antd 5；在src/theme/tokens.ts定义antdTokenOverrides和customTokens，注入所有设计标准色；在src/theme/components.ts定义componentOverrides进行组件精细调整；基于father 4（Rollup）进行组件打包，使用dumi 2构建文档站点。",
                            "result": "Slimfit成为公司B端产品线的标准组件库，有效统一了产品视觉风格，提升了品牌一致性。"
                        },
                        {
                            "id": "inf-1-2",
                            "title": "自建图标系统",
                            "situation": "公司使用的Arco图标需要样式修改（如线条粗细）并增加大量内部专用图标，直接依赖原库无法满足需求。",
                            "task": "构建统一管理的企业级图标体系。",
                            "action": "在slimfit内自建图标系统：在src/icons/svgs/目录维护SVG源文件；创建BaseIcon组件提供统一props和默认样式（如fill、stroke、width等）；开发自动化工具将SVG转换为React组件；统一设置线条粗细、对齐等视觉属性。",
                            "result": "图标资产集中管理，样式统一，新增修改方便，开发调用简单一致，为40+内部项目提供了统一的图标解决方案。"
                        },
                        {
                            "id": "inf-1-3",
                            "title": "多技术栈兼容方案",
                            "situation": "公司内存在使用Tailwind CSS的项目，与antd定制样式可能存在冲突；需要确保所有项目统一应用指定的品牌字体。",
                            "task": "设计跨技术栈的设计规范共享机制。",
                            "action": "开发字体管理解决方案：制作独立fonts.css并托管字体文件；构建创新的Tailwind Preset：创建tailwind.preset.js将slimfit的token映射为Tailwind配置（颜色、圆角、间距等），支持项目一行代码引入所有设计规范；实现一键配置的SlimfitProvider组件。",
                            "result": "极大简化了不同技术栈项目接入设计规范的流程，B端产品的整体视觉差异减少30%，新项目接入时间缩短50%，设计满意度提升25%。"
                        }
                    ]
                },
                {
                    "id": "inf-2",
                    "title": "Base-UI组件库",
                    "type": "基础设施建设",
                    "category": "基础设施相关",
                    "period": "2019年1月 - 2021年5月",
                    "position": "核心开发",
                    "summary": "参与公司第一代Vue 2组件库Base-UI的建设，负责开发表格的行/列冻结功能，使用虚拟列表优化大数据量下的性能，将打包工具从Webpack切换至Rollup优化组件库体积与加载性能。",
                    "achievements": [
                        {
                            "id": "inf-2-1",
                            "title": "高性能组件开发",
                            "situation": "早期Vue项目缺乏高质量、高性能的图表、选择器等基础组件。",
                            "task": "作为核心开发者，参与公司第一代Vue 2组件库Base-UI的建设。",
                            "action": "负责开发表格的行/列冻结功能；使用虚拟列表技术优化Select、TreeSelect等组件在处理大数据量时的性能。",
                            "result": "成功封装50余个UI组件，组件在公司内部项目复用率达到60%，Select等组件支持1万条以上数据的流畅渲染，性能提升200%。"
                        },
                        {
                            "id": "inf-2-2",
                            "title": "组件库打包优化",
                            "situation": "组件库采用Webpack打包，体积较大，加载较慢。",
                            "task": "优化组件库的打包方式，减小体积，提升加载性能。",
                            "action": "将打包工具从Webpack切换为Rollup，利用其对ES Module的良好支持和更优的tree-shaking效果；配置输出多种模块化格式(ESM, CJS)。",
                            "result": "组件库整体打包体积减少15%，按需加载效果更佳，使用该库的项目首屏加载速度平均提升30%。"
                        }
                    ]
                },
                {
                    "id": "tool-1",
                    "title": "开发脚本与工具链建设",
                    "type": "",
                    "category": "工程提效相关",
                    "period": "2021年3月 - 至今",
                    "position": "工程化负责人",
                    "summary": "设计开发各类自动化脚本与工具链，解决项目配置标准化、新员工环境配置、代码转换等问题，显著提升团队工作效率与开发体验。",
                    "achievements": [
                        {
                            "id": "tool-1-1",
                            "title": "项目模板标准化",
                            "situation": "项目初始化配置繁琐，本地开发环境启动慢，Webpack构建配置复杂。",
                            "task": "提升前端工程化效率和开发者体验。",
                            "action": "开发标准化的项目模板（React/Vue/Node）；深度优化Webpack构建配置（缓存、DllPlugin等）；引入并推广Vite和esbuild等新一代构建工具；创建项目初始化脚本，自动完成基础配置、Git Hooks设置和依赖安装。",
                            "result": "新项目初始化时间从30分钟缩短至5分钟；本地开发服务器启动时间平均减少70%；开发者对工程化工具链的满意度提升50%。"
                        },
                        {
                            "id": "tool-1-2",
                            "title": "新员工入职优化",
                            "situation": "新员工加入项目组后，熟悉项目技术栈和开发流程的时间较长；开发环境配置过程繁琐且容易出错。",
                            "task": "优化新员工的入职和上手体验，简化环境配置。",
                            "action": "系统性地梳理各项目组的技术文档，补充缺失内容；编写新员工入职指南，包含环境配置、开发流程、常见问题等；开发基于Homebrew的一键环境配置脚本(setup.sh)，自动安装所需软件包(Node.js、Docker、Git等)并完成基础配置，如Git config、SSH key生成、npm registry设置等。",
                            "result": "新员工独立承担开发任务的平均时间从2周缩短至3天；开发环境配置时间从半天降至15分钟，大幅降低入职初期挫折感；环境配置相关问题减少75%。"
                        },
                        {
                            "id": "tool-1-3",
                            "title": "自动化代码迁移工具",
                            "situation": "项目技术栈升级（如React 16到18，Antd 4到5）过程中，手动调整API和组件用法工作量巨大。",
                            "task": "构建自动化工具简化升级过程，降低出错率。",
                            "action": "开发一系列Node.js脚本，使用AST技术自动识别并替换过时API；构建项目依赖图谱分析工具，识别潜在影响范围；编写针对antd、react-router等常用库的专用转换规则；设计批量执行和回滚机制，确保转换过程可控。",
                            "result": "React 18升级项目的代码调整工作量减少70%，手动替换约1000处代码点的工作被自动化完成；API错误使用的检出率提高到95%，避免了大量潜在运行时错误。"
                        }
                    ]
                },
                {
                    "id": "tool-2",
                    "title": "Figma扩展开发",
                    "type": "",
                    "category": "工程提效相关",
                    "period": "2022年6月 - 至今",
                    "position": "工具开发负责人",
                    "summary": "开发Figma插件，实现设计稿元素一键提取并转换为Pixi.js所需的场景配置JSON或React/Vue组件代码，显著提升开发效率和设计还原度。",
                    "achievements": [
                        {
                            "id": "tool-2-1",
                            "title": "设计稿转代码工具",
                            "situation": "设计师交付的设计稿需要前端工程师手动转换为代码或配置，效率低下且易出错。",
                            "task": "自动化设计稿到代码/配置的转换过程。",
                            "action": "开发Figma插件，实现设计稿元素（如图层、样式）一键提取并转换为Pixi.js所需的场景配置JSON或基础的React/Vue组件代码。",
                            "result": "特定场景（如Pixi.js配置生成）的开发效率提升100%，设计稿还原度提高40%。"
                        }
                    ]
                },
                {
                    "id": "tool-3",
                    "title": "VSCode扩展开发",
                    "type": "",
                    "category": "工程提效相关",
                    "period": "2020年8月 - 至今",
                    "position": "开发工具负责人",
                    "summary": "开发自定义ESLint插件、VS Code插件及代码迁移工具，提高代码质量，加强规范检查，优化开发体验，显著提升开发效率。",
                    "achievements": [
                        {
                            "id": "tool-3-2",
                            "title": "Franky",
                            "situation": "日常开发中存在较多重复性操作和模板代码编写需求。",
                            "task": "开发VSCode插件提升开发效率和便捷性。",
                            "action": "开发Franky VSCode插件，实现三大核心功能：1) fileheader自动生成和更新文件头注释；2) 基于Figma样式一键生成对应的Tailwind CSS类名；3) 动态模板系统支持本地/远程模板仓库，通过WebView填写变量后生成对应代码。所有功能无需额外配置即可使用。",
                            "result": "开发者日常编码效率平均提升45%，模板代码生成时间减少90%，样式还原准确度提高60%。"
                        },
                        {
                            "id": "tool-3-3",
                            "title": "WebBar",
                            "situation": "开发过程中经常需要切换不同系统、查询文档和使用内部工具，上下文切换频繁。",
                            "task": "简化常用资源访问，减少工作流中的上下文切换。",
                            "action": "开发WebBar VSCode插件，在编辑器状态栏添加可自定义按钮，一键访问常用网页；支持自定义配置和分组管理链接；在插件内实现简易浏览器预览功能，避免切换窗口。",
                            "result": "开发者工作流上下文切换时间减少35%，常用资源访问效率提升70%，新同事熟悉内部系统的时间缩短50%。"
                        },
                        {
                            "id": "tool-3-4",
                            "title": "CodeTransformer",
                            "situation": "代码重构和升级过程中，大量重复性代码转换工作需要手动完成，耗时且易出错。",
                            "task": "构建VSCode内的代码转换工具，提高代码重构效率和准确性。",
                            "action": "开发CodeTransformer插件，集成Babel进行代码快速重构，支持中文查找、依赖图谱分析等高级功能；提供可视化操作界面，支持官方及自定义babel插件；实现依赖图谱可视化和分析，结合tsconfig路径映射确保代码迁移无遗漏。",
                            "result": "代码重构效率提升400%，特定转换任务（如组件库API升级）准确率达95%，大型项目依赖分析时间从小时级降至分钟级，成为团队技术升级的关键工具。"
                        },
                        {
                            "id": "tool-3-5",
                            "title": "自动化代码迁移工具",
                            "situation": "面临大规模技术栈升级或代码库重构，手动迁移工作量巨大且易出错。",
                            "task": "开发自动化工具辅助代码迁移。",
                            "action": "基于Babel和jscodeshift开发代码静态分析和自动转换工具；编写针对具体迁移场景的codemod脚本；集成到CodeTransformer插件中实现可视化操作。",
                            "result": "在多次代码迁移项目中，自动化工具将迁移效率平均提升400%，由迁移引入的Bug数量减少90%。"
                        }
                    ]
                }
            ]
        },
        {
            "id": 3,
            "company": "房天下",
            "position": "主程/前端开发",
            "location": "北京",
            "period": "2017年11月 - 2019年3月",
            "description": "独立负责三房活动、拿地助手、城市地图等项目的前端开发与优化，主导项目构建、页面开发与数据可视化。",
            "items": [
                {
                    "id": "fang-1",
                    "title": "三房活动",
                    "period": "2017年11月 - 2019年3月",
                    "position": "主程",
                    "category": "业务系统相关",
                    "summary": "独立负责项目构建，集成Webpack打包与Babel编译，优化构建流程，提升开发效率20%。采用Express框架开发Web层Controller，设计并实现稳定高效的接口服务。使用Vue与Vue-router构建前端页面，实现动态路由与流畅交互，提升用户体验。",
                    "achievements": [
                        {
                            "id": "fang-1-1",
                            "title": "构建流程优化",
                            "situation": "项目初期构建流程复杂，影响开发效率。",
                            "task": "优化前端构建流程，提升开发效率。",
                            "action": "集成Webpack打包与Babel编译，梳理并优化构建脚本。",
                            "result": "开发效率提升20%，构建流程更为稳定高效。"
                        },
                        {
                            "id": "fang-1-2",
                            "title": "高效接口服务设计",
                            "situation": "需要稳定高效的Web层接口支撑活动业务。",
                            "task": "设计并实现高效的接口服务。",
                            "action": "采用Express框架开发Web层Controller，优化接口结构和性能。",
                            "result": "接口服务稳定，支撑高并发业务需求。"
                        }
                    ]
                },
                {
                    "id": "fang-2",
                    "title": "拿地助手",
                    "period": "2017年11月 - 2019年3月",
                    "position": "前端开发",
                    "category": "业务系统相关",
                    "summary": "负责土地与位置搜索条件页开发，利用localStorage实现搜索记录持久化，提升用户操作便捷性。基于Element-UI封装条件区组件，标准化交互逻辑，加快页面开发速度30%。集成高德地图API与ECharts，开发结果展示页，支持数据可视化与地理信息精准呈现。",
                    "achievements": [
                        {
                            "id": "fang-2-1",
                            "title": "用户体验提升",
                            "situation": "用户需频繁切换和保存搜索条件。",
                            "task": "提升搜索条件页的便捷性。",
                            "action": "利用localStorage实现搜索记录持久化，优化交互。",
                            "result": "用户操作便捷性显著提升，获得业务好评。"
                        },
                        {
                            "id": "fang-2-2",
                            "title": "组件标准化与开发提效",
                            "situation": "页面开发周期长，组件复用性低。",
                            "task": "提升页面开发效率。",
                            "action": "基于Element-UI封装条件区组件，标准化交互逻辑。",
                            "result": "页面开发速度提升30%，组件复用性增强。"
                        }
                    ]
                },
                {
                    "id": "fang-3",
                    "title": "城市地图",
                    "period": "2017年11月 - 2019年3月",
                    "position": "前端开发",
                    "category": "业务系统相关",
                    "summary": "主导经济、人口、潜客大数据页面及后台接口开发，初期基于jQuery实现交互逻辑，确保页面功能稳定。集成极海地图与ECharts，完成数据可视化展示，满足业务多维度分析需求。中期引入Vue框架，开发投资立项通用条件组件及报告中心PPT下载模块，提升复用性与功能扩展性。后期采用Express框架构建Web层Controller，实现Excel文件上传与下载功能，优化数据处理效率。",
                    "achievements": [
                        {
                            "id": "fang-3-1",
                            "title": "多维数据可视化",
                            "situation": "需展示经济、人口等多维大数据。",
                            "task": "实现高效的数据可视化展示。",
                            "action": "集成极海地图与ECharts，开发多维度数据可视化页面。",
                            "result": "满足业务多维度分析需求，提升数据洞察力。"
                        },
                        {
                            "id": "fang-3-2",
                            "title": "通用组件与自动化提升",
                            "situation": "页面功能扩展性和数据处理效率需提升。",
                            "task": "提升页面复用性和数据处理自动化。",
                            "action": "引入Vue框架，开发通用条件组件和PPT下载模块，采用Express实现Excel上传下载。",
                            "result": "页面复用性增强，数据处理效率大幅提升。"
                        }
                    ]
                }
            ]
        },
        {
            "id": 4,
            "company": "深圳市天蓝色软件服务有限公司",
            "position": "Java开发",
            "location": "深圳",
            "period": "2016年7月 - 2017年9月",
            "description": "主要负责SaaS项目的二次开发，涵盖Java后端与前端全栈开发。",
            "items": [
                {
                    "id": "tl-1",
                    "title": "SaaS项目二次开发",
                    "period": "2016年7月 - 2017年9月",
                    "position": "Java开发+全干工程师",
                    "category": "业务系统相关",
                    "summary": "主要做一些二次开发的SaaS项目，涉及Java后端开发与前端页面实现，提升项目交付效率。",
                    "achievements": [
                        {
                            "id": "tl-1-1",
                            "title": "ERM系统二次开发",
                            "situation": "客户需要基于现有ERM系统进行功能定制与扩展，满足特定行业需求。",
                            "task": "负责系统后端功能开发与前端页面实现，确保项目按时交付。",
                            "action": "使用Java+Spring+Hibernate开发后端业务逻辑；前端采用jQuery+原生HTML/CSS/JS技术栈实现交互界面；设计与优化数据库结构，编写存储过程提升查询性能；实现客户特定的报表导出功能和批量数据处理模块。",
                            "result": "成功交付定制化ERM系统，较原计划提前2周上线；系统整体响应时间提升30%，满足客户百万级数据处理需求；实现与客户多个内部系统的数据集成，获得客户好评与后续合作机会。"
                        }
                    ]
                }
            ]
        },
        {
            "id": 5,
            "company": "海澜集团",
            "position": "职业店长/区域主管",
            "location": "无锡",
            "period": "2014年7月 - 2016年5月",
            "description": "市场部管理岗，负责全国出差及新店开业前期工作，后晋升为区域主管。",
            "items": [
                {
                    "id": "hl-1",
                    "title": "门店进销存系统",
                    "period": "2016年2月 - 2016年5月",
                    "position": "区域主管",
                    "category": "",
                    "summary": "基于Java+JSP实现的门店进销存系统，系统用于同步仓库与门店间的货品信息，支持盘点枪数据录入，便于月度盘点，包括商品入库、销售统计、库存管理和盘点等模块，提高销售数据准确性和库存管理效率。",
                    "achievements": [
                        {
                            "id": "hl-1-1",
                            "title": "进销存流程优化",
                            "situation": "销售人员从仓库取货后需要手动填写出库单,易错易漏,晚上统计进销存时容易出错,导致月度盘点时门店仓库数据与系统数据不一致",
                            "task": "提高进销存计算的准确性和效率，降低错误率。",
                            "action": "设计简化的操作流程，出库时使用盘点枪登记；每晚读取盘点枪数据自动计算并格式化销售和库存数据，便于生成每日进销存.",
                            "result": "系统数据录入错误率降低75%，员工培训时间缩短50%，季度盘点差异率从3.8%降至0.8%，为总部提供了更准确的销售数据支持。"
                        }
                    ]
                },
                {
                    "id": "hl-2",
                    "title": "新店开业流程自动化",
                    "period": "2014年9月 - 2016年2月",
                    "position": "职业店长",
                    "category": "",
                    "summary": "负责优化新店开业流程，使用Java+JSP技术开发新店TODO-LIST系统，以四象限方式展示紧急/重要程度不同的任务，替代之前依靠个人经验和笔记的管理方式，提高工作效率，确保新店开业前两个月内各项任务按时完成。",
                    "achievements": [
                        {
                            "id": "hl-2-1",
                            "title": "新店TODO-LIST系统开发",
                            "situation": "新店开业前有大量繁琐的准备工作需要协调和跟踪，手工管理效率低下且容易遗漏关键事项。",
                            "task": "开发一个简单高效的任务管理系统，确保新店开业准备工作有序进行。",
                            "action": "使用Java+JSP技术开发基于Web的任务跟踪系统，采用四象限法（紧急且重要/重要不紧急/紧急不重要/既不紧急也不重要）展示任务；实现自动任务安排、提醒和统计功能；设计红黄绿三色预警机制，直观显示任务状态和紧急程度。",
                            "result": "新店筹备期任务完成率从82%提升至98%，筹备周期平均缩短3天，协调沟通时间减少60%，系统在全国35家新店开业中成功应用，获得集团表彰。"
                        }
                    ]
                }
            ]
        }
    ],
    "education": [
        {
            "id": 1,
            "degree": "学士学位",
            "field": "农业资源与环境",
            "institution": "吉林大学",
            "location": "吉林",
            "period": "2010年9月 - 2014年7月"
        }
    ],
    "portfolioProjects": [
        {
            "id": 1,
            "title": "我不知道的周刊",
            "description": "AI驱动的前端技术周刊，精选并深度解读Web前端及周边生态的优质内容，涵盖实用工具、开源项目、前沿资讯与最佳实践。采用AI技术智能分析与筛选内容，让开发者持续获取高质量的前端资讯，提升专业素养和技术视野。",
            "image": "https://img.mengpeng.tech/i/2025/04/19/68035b3218ba2.webp",
            "technologies": ["Astro", "React", "OpenAI", "Tailwind CSS", "Vercel", "MCP", "Node.js"],
            "techIds": ["astro", "react", "openai", "tailwind", "vercel", "mcp", "nodejs"],
            "liveLink": "https://weekly.mengpeng.tech",
            "repoLink": "https://github.com/NorthSeacoder/weekly",
            "featured": true,
            "evolution": ["内容手动整理", "AI辅助筛选", "OpenAI API集成", "本地MCP服务驱动"],
            "related": [4]
        },
        {
            "id": 2,
            "title": "@nsea/xmind-handler",
            "description": "基于Node.js的工具库，用于高效处理XMind文件。支持根据标记过滤主题、将内容转换为JSON、Markdown或精简XMind文件等多种格式。实现了命令行接口简化用户操作，支持多种输出格式，大幅提升思维导图内容处理和转换的效率。",
            "image": "https://img.mengpeng.tech/i/2025/04/19/68035be67ab0d.webp",
            "technologies": ["Node.js", "TypeScript", "CLI", "XMind SDK"],
            "techIds": ["nodejs", "typescript", "cli", "xmind"],
            "liveLink": "https://www.npmjs.com/package/@nsea/xmind-handler",
            "repoLink": "https://github.com/NorthSeacoder/xmind-handler",
            "featured": true,
            "evolution": ["节点过滤", "多格式转换", "命令行工具"],
            "related": [4]
        },
        {
            "id": 3,
            "title": "@codetransformer/find-chinese",
            "description": "高效查询目标文件夹及其依赖文件中所有中文字符的CodeTransformer插件。实现了对复杂项目结构的全面扫描，提供精准的字符定位和统计功能，显著提升了代码审查和国际化工作效率，节省超过30%的时间。广泛应用于多语言支持和国际化项目中。",
            "image": "/placeholder.svg",
            "technologies": ["TypeScript", "AST", "Babel", "VSCode API"],
            "techIds": ["typescript", "ast", "babel", "vscode"],
            "liveLink": "https://www.npmjs.com/package/@codetransformer/find-chinese",
            "repoLink": "https://github.com/NorthSeacoder/codetransformer",
            "featured": true,
            "evolution": ["基础扫描", "依赖追踪", "统计分析"],
            "related": [4, 6, 7]
        },
        {
            "id": 4,
            "title": "Franky (VSCode)",
            "description": "高效开发者工具VSCode扩展，支持动态模板生成，提供20多个业务模板，简化代码编写流程。支持Tailwindcss类名转换，自动生成文件头注释，无需额外配置，提高日常开发效率。特别适合React、Vue等前端项目快速开发。",
            "image": "https://img.mengpeng.tech/i/2025/04/19/68035c8e0d607.webp",
            "technologies": ["TypeScript", "VSCode API", "Template Engine", "Tailwind CSS"],
            "techIds": ["typescript", "vscode", "template", "tailwind"],
            "liveLink": "https://marketplace.visualstudio.com/items?itemName=NorthSeacoder.franky",
            "repoLink": "https://github.com/NorthSeacoder/franky",
            "featured": true,
            "evolution": ["fileheader", "tailwind 转换", "模板系统", "动态模板"],
            "related": [7]
        },
        {
            "id": 5,
            "title": "WebBar (VSCode)",
            "description": "轻量级便捷工具VSCode扩展，在状态栏中添加可自定义按钮，方便一键访问常用网页，提升开发便捷性。完全可配置的按钮系统让开发者能快速访问文档、管理系统、测试环境等常用资源，减少工作流中的上下文切换成本。",
            "image": "https://img.mengpeng.tech/i/2025/04/19/68035dec4bed3.webp",
            "technologies": ["TypeScript", "VSCode API", "WebView"],
            "techIds": ["typescript", "vscode", "webview"],
            "liveLink": "https://marketplace.visualstudio.com/items?itemName=NorthSeacoder.webbar",
            "repoLink": "https://github.com/NorthSeacoder/webbar",
            "featured": false,
            "evolution": ["固定链接", "自定义配置"],
            "related": [4]
        },
        {
            "id": 6,
            "title": "CodeTransformer (VSCode)",
            "description": "强大的代码转换VSCode插件，提供官方babel-plugin及自定义plugin支持，优化代码重构流程，代码重构效率提升50%。支持搜索目标文件或文件夹依赖，递归构建依赖图谱，结合tsconfig path拼接路径，确保迁移无遗漏。在大型项目重构中表现尤为突出，是团队技术升级的得力助手。",
            "image": "https://img.mengpeng.tech/i/2025/04/19/68035e78c6dd6.webp",
            "technologies": ["TypeScript", "Babel", "AST", "依赖分析"],
            "techIds": ["typescript", "babel", "ast", "dependency-analysis"],
            "liveLink": "https://marketplace.visualstudio.com/items?itemName=NorthSeacoder.codetransformer",
            "repoLink": "https://github.com/NorthSeacoder/codetransformer",
            "featured": true,
            "evolution": ["中文查找", "依赖图谱查找", "支持自定义扩展"],
            "related": [3, 7]
        },
        {
            "id": 7,
            "title": "@nsea/depseeker",
            "description": "专业的Node.js依赖分析工具，用于快速扫描和分析项目依赖关系。能够递归构建依赖图谱，支持复杂依赖解析，识别循环依赖和潜在问题。支持ES模块和CommonJS模块，结合tsconfig路径映射提供准确的依赖图分析，是大型项目重构和代码优化的理想工具。",
            "image": "https://img.mengpeng.tech/i/2025/04/19/68035efb9ffe6.webp",
            "technologies": ["Node.js", "TypeScript", "依赖分析", "AST"],
            "techIds": ["nodejs", "typescript", "dependency-analysis", "ast"],
            "liveLink": "https://www.npmjs.com/package/@nsea/depseeker",
            "repoLink": "https://github.com/NorthSeacoder/depseeker",
            "featured": true,
            "evolution": ["简单依赖解析", "依赖图谱解析", "支持解析 alias"],
            "related": [2, 6]
        }
    ]
}
