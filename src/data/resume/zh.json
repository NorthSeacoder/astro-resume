{
  "about": {
    "bio": "拥有8年前端开发经验与4年团队管理经验，专注于中后台系统架构设计与工程化建设，主导10余个大型中后台系统的开发与重构。带领3-5人前端团队，负责技术方案选型、代码质量管控与团队技术培养，提升团队人均开发效率40%。推动前端技术栈升级与标准化，擅长构建高复用性组件库与工具链，确保项目交付的高效性与可维护性。",
    "stats": {
      "yearsExperience": 8,
      "projectsCompleted": 20,
      "happyClients": 15,
      "yearsDescription": "前端开发与团队管理经验",
      "projectsDescription": "大型中后台系统开发",
      "clientsDescription": "跨行业客户合作"
    },
    "keyPoints": [
      "拥有8年前端开发经验与4年团队管理经验，专注于中后台系统架构设计与工程化建设，主导10余个大型中后台系统的开发与重构。",
      "带领3-5人前端团队，负责技术方案选型、代码质量管控与团队技术培养，提升团队人均开发效率40%。",
      "推动前端技术栈升级与标准化，擅长构建高复用性组件库与工具链，确保项目交付的高效性与可维护性。"
    ]
  },
  "skills": {
    "categories": [
      {
        "id": 1,
        "name": "前端基础技术",
        "icon": "Code",
        "skills": [
          { 
            "name": "JavaScript/TypeScript", 
            "level": "Expert",
            "description": "使用JavaScript (ES6+)、CSS3和HTML5开发多年，使用TypeScript提升代码质量和可维护性",
            "percentage": 95,
            "keywords": ["ES6+", "TypeScript", "HTML5", "CSS3"]
          },
          { 
            "name": "React生态", 
            "level": "Expert",
            "description": "精通React及其周边生态，包括Hooks、Redux、React Router等，能构建高性能React应用",
            "percentage": 90,
            "keywords": ["React", "Hooks", "Redux", "React Router"]
          },
          { 
            "name": "Vue生态", 
            "level": "Expert",
            "description": "深度使用Vue.js（2.x和3.x）及相关技术栈，包括Vuex、Vue Router、Composition API等",
            "percentage": 88,
            "keywords": ["Vue", "Vuex", "Vue Router", "Composition API"]
          },
          { 
            "name": "性能与网络", 
            "level": "Advanced",
            "description": "了解HTTP/2、浏览器渲染机制、V8引擎优化及网络安全，能应用多种性能优化技术",
            "percentage": 85,
            "keywords": ["HTTP/2", "浏览器渲染", "V8引擎", "网络安全"]
          },
          { 
            "name": "UI样式管理", 
            "level": "Expert",
            "description": "在多个项目中使用Tailwind CSS实现高效样式管理",
            "percentage": 90,
            "keywords": ["Tailwind CSS", "响应式设计"]
          }
        ]
      },
      {
        "id": 2,
        "name": "工程化体系",
        "icon": "Zap",
        "skills": [
          { 
            "name": "构建工具", 
            "level": "Advanced",
            "description": "深度使用Webpack、Vite、Rollup、esbuild和Tsup，积累了丰富的模块化和打包优化经验",
            "percentage": 85,
            "keywords": ["Webpack", "Vite", "Rollup", "esbuild", "Tsup"]
          },
          { 
            "name": "工程化生态", 
            "level": "Expert",
            "description": "常用UMI、Dumi和Father构建工具链，使用ESLint规范代码质量，使用Vitest进行单元测试",
            "percentage": 90,
            "keywords": ["UMI", "Dumi", "Father", "ESLint", "Vitest"]
          },
          { 
            "name": "大型项目管理", 
            "level": "Advanced",
            "description": "有使用Monorepo模式支持大型项目开发的成功经验",
            "percentage": 85,
            "keywords": ["Monorepo", "pnpm", "turborepo"]
          },
          { 
            "name": "CI/CD自动化流程", 
            "level": "Advanced",
            "description": "设计并实施前端项目CI/CD流程，包括自动化测试、构建、部署与发布，结合GitHub Actions和Jenkins实现全流程自动化",
            "percentage": 85,
            "keywords": ["GitHub Actions", "Jenkins", "Docker", "自动化测试"]
          },
          { 
            "name": "微前端架构", 
            "level": "Advanced",
            "description": "使用qiankun/micro-app等微前端框架实现大型应用的拆分与集成，解决多团队协作与技术栈混合问题",
            "percentage": 80,
            "keywords": ["微前端", "qiankun", "Module Federation", "应用集成"]
          }
        ]
      },
      {
        "id": 3,
        "name": "前沿技术实践",
        "icon": "BrainCircuit",
        "skills": [
          { 
            "name": "数据可视化", 
            "level": "Advanced",
            "description": "有ECharts和Pixi.js进行复杂数据可视化的项目经验",
            "percentage": 85,
            "keywords": ["ECharts", "Pixi.js", "数据可视化"]
          },
          { 
            "name": "服务端渲染", 
            "level": "Advanced",
            "description": "有Next.js服务端渲染和静态站点生成的项目经验",
            "percentage": 80,
            "keywords": ["Next.js", "SSR", "静态站点生成"]
          },
          { 
            "name": "跨端开发技术", 
            "level": "Proficient",
            "description": "使用React Native和Electron开发跨平台应用，打通Web、移动端与桌面端开发流程",
            "percentage": 75,
            "keywords": ["React Native", "Electron", "跨平台", "Tauri"]
          },
          { 
            "name": "Web 3D与WebGL", 
            "level": "Proficient",
            "description": "在项目中使用Three.js实现3D可视化与交互效果，了解WebGL基本原理与应用场景",
            "percentage": 70,
            "keywords": ["Three.js", "WebGL", "3D可视化", "Babylon.js"]
          },
          { 
            "name": "扩展与插件开发", 
            "level": "Proficient",
            "description": "具备VSCode插件、Figma扩展和浏览器扩展的开发经验",
            "percentage": 75,
            "keywords": ["VSCode插件", "Figma扩展", "浏览器扩展"]
          },
          { 
            "name": "渐进式Web应用(PWA)", 
            "level": "Proficient",
            "description": "实现离线缓存、推送通知等PWA特性，提升Web应用的可用性与用户体验",
            "percentage": 75,
            "keywords": ["Service Worker", "缓存策略", "推送通知", "安装体验"]
          }
        ]
      }
    ]
  },
  "experiences": [
    {
      "id": 1,
      "company": "北京瓴岳科技",
      "position": "架构师",
      "location": "北京",
      "period": "2019年3月 - 至今",
      "description": "负责基于React和Vue技术栈的复杂系统前端架构设计与性能优化，带领前端团队推动技术升级与规范化，设计开发高复用性组件库与工具链以提升开发效率。",
      "modules": [
        {
          "id": "module-1",
          "title": "业务系统开发",
          "type": "module",
          "children": [
            {
              "id": "project-oa",
              "name": "OA系统及衍生产品线",
              "period": "2020年3月 - 至今",
              "position": "架构师",
              "type": "project",
              "children": [
                {
                  "id": "subproject-oa-domestic",
                  "name": "国内版本（React）",
                  "type": "subproject",
                  "background": "基于React、Webpack（生产环境）、Vite（本地开发）、WebSocket、Ant Design（antd）、i18next、Redux、Redux-Saga的高性能OA系统前端开发",
                  "stars": [
                    {
                      "id": "star-101",
                      "title": "表单性能优化",
                      "situation": "系统核心模块存在大型表单（超过1000行），初始渲染时间严重（约3秒），影响用户操作效率。",
                      "task": "将表单渲染时间控制在1秒内。",
                      "action": "调研并选型虚拟列表和图片/组件懒加载技术；使用React Profiler精准定位渲染瓶颈；重构表单组件实现按需渲染；使用react-lazy-with-preload代替原生React.lazy实现路由组件预加载，解决首次访问页面加载缓慢问题。",
                      "result": "大型表单平均渲染时间从3秒降至800毫秒，性能提升73%；组件路由切换时间降低40%，用户反馈操作流畅度显著提高。"
                    },
                    {
                      "id": "star-102",
                      "title": "多语言支持方案",
                      "situation": "业务拓展需要支持多语言环境，现有架构缺乏国际化支持能力。",
                      "task": "设计并实现稳健、易扩展的多语言解决方案。",
                      "action": "引入i18next库，构建基于JSON的动态语言包按需加载机制；配置fallback机制确保在特定语言翻译缺失时自动显示默认语言文本，避免界面出现空白；对日期、货币等格式进行本地化处理，同时实时监控代码中fallback触发情况，保证翻译覆盖率。",
                      "result": "成功支持4种语言，因翻译缺失导致的界面显示错误减少95%；监控系统准确率达99%，提前发现并修复200+潜在翻译问题，保障全球用户基础使用体验。"
                    },
                    {
                      "id": "star-103",
                      "title": "工位图配置流程优化",
                      "situation": "原有工位图配置流程繁琐（行政人员提供平面图和Excel表格 -> UI设计 -> 前端开发），每次配置耗时达4人日（设计2天+前端2天）。",
                      "task": "分步骤优化工位图配置流程，提高配置效率，降低技术门槛。",
                      "action": "第一阶段：开发Figma插件替代Excel表格手工计算坐标，设计师直接在设计稿中标记工位点，插件自动提取坐标生成配置，节省前端开发时间；第二阶段：构建完整可视化配置工具，使行政人员能直接在平台上绘制和配置工位图，不再依赖设计和开发。",
                      "result": "工位图配置流程从\"行政（平面图+Excel表格0.5人日）+ 设计（2人日）+ 前端（2人日）\"先降至\"行政（0.5人日）+ 设计（2人日）+ 前端（0.5人日）\"，再降至\"行政人员可视化配置（0.5人日）\"，项目总耗时从4.5人日降至0.5人日，配置错误率显著下降。"
                    },
                    {
                      "id": "star-104",
                      "title": "WebSocket实时功能优化",
                      "situation": "WebSocket长连接在复杂网络环境下存在断连和高延迟问题，影响实时功能体验。",
                      "task": "提高WebSocket通信稳定性和效率，扩展其实际应用场景。",
                      "action": "实现指数退避自动重连策略；使用MessagePack对传输数据进行二进制压缩；在客户端和服务端都增加心跳检测和超时处理机制；落地两个核心应用场景：1）后端实时推送消息通知和任务变更；2）前端创建/编辑核心配置时触发所有在线用户数据刷新机制。",
                      "result": "平均消息延迟降低40%，带宽使用降低25%；WebSocket连接成功率稳定在99.5%以上；数据同步延迟从平均30秒（原需用户手动刷新）降至2秒（自动更新推送），实时功能投诉率降低80%。"
                    },
                    {
                      "id": "star-105",
                      "title": "前端安全增强",
                      "situation": "OA系统涉及敏感数据，需要增强前端安全防护能力。",
                      "task": "识别并修复潜在前端安全漏洞，建立安全规范。",
                      "action": "实施严格的Content Security Policy(CSP)防御XSS攻击；对所有用户输入进行HTML实体转义和类型校验；引入CSRF Token机制防止跨站请求伪造；开发动态水印功能，在敏感页面自动生成包含用户ID和登录时间的半透明水印，防止信息泄露和截图传播；定期进行安全扫描和代码审计。",
                      "result": "通过第三方安全渗透测试，前端安全风险评分提升85%，未发现高风险漏洞；水印功能有效降低敏感信息泄露风险，信息安全事件减少70%。"
                    },
                    {
                      "id": "star-106",
                      "title": "构建优化与开发体验提升",
                      "situation": "随着项目复杂度增加，Webpack构建时间过长（超过5分钟），本地开发热更新(HMR)缓慢。",
                      "task": "缩短生产环境构建时间，提高本地开发效率。",
                      "action": "优化Webpack配置：启用tree-shaking、代码拆分；使用thread-loader或parallel-webpack进行多核并行编译；本地开发服务器切换为Vite，利用其基于原生ESM的快速冷启动和HMR能力。",
                      "result": "生产环境构建时间缩短35%；本地开发启动时间缩短90%。"
                    },
                    {
                      "id": "star-107",
                      "title": "性能监控体系搭建",
                      "situation": "缺乏系统性前端性能监控，难以主动发现和定位线上性能问题。",
                      "task": "搭建前端性能监控体系，量化用户体验。",
                      "action": "集成Sentry进行错误监控和Session Replay用户行为回放；将Web Vitals指标（LCP、FID、CLS）和自定义业务指标上报至Grafana，建立可视化监控面板。",
                      "result": "实现关键页面性能指标（如FMP P95）实时监控，稳定控制在3.5秒内，主动发现并解决的性能问题比例提升60%。"
                    }
                  ]
                },
                {
                  "id": "subproject-oa-wechat",
                  "name": "企业微信应用",
                  "type": "subproject",
                  "background": "同时支持PC Web与企业微信移动端的跨平台应用设计开发",
                  "position": "前端负责人",
                  "stars": [
                    {
                      "id": "star-108",
                      "title": "跨平台技术架构设计",
                      "situation": "公司需要开发同时支持PC Web和企业微信移动端的应用系统。",
                      "task": "从零设计构建高复用性的跨平台技术架构。",
                      "action": "采用pnpm实现Monorepo架构进行多包项目管理；基于React、UMI、Tailwind CSS、react-query、Zustand构建技术栈；从项目一开始就建立严格的跨平台组件设计规范和ESLint规则强制执行；提取并规范化30+跨平台业务Hooks和10+响应式公共UI组件，发布至内部npm。",
                      "result": "成功实现PC与移动端之间70%核心业务逻辑和UI组件代码复用，新功能平均开发周期缩短30%，达到高度代码复用，减少40%开发工作量，提高代码一致性和可维护性。"
                    },
                    {
                      "id": "star-109",
                      "title": "移动端性能优化",
                      "situation": "部分页面（尤其在移动弱网环境下）首次加载白屏时间长。",
                      "task": "优化页面加载性能，减少白屏时间。",
                      "action": "利用react-query的缓存和后台更新机制实现数据预加载和状态保持；优化代码分割策略，按需加载非关键资源；合理利用HTTP缓存（Cache-Control、ETag）。",
                      "result": "关键页面平均白屏时间降低50%，Grafana监控显示数据加载P95时间降低35%。"
                    }
                  ]
                },
                {
                  "id": "subproject-oa-indonesia",
                  "name": "印尼版本OA（Vue）",
                  "type": "subproject",
                  "background": "快速开发针对印尼市场的本地化OA系统",
                  "position": "Vue技术专家",
                  "stars": [
                    {
                      "id": "star-110",
                      "title": "快速本地化开发",
                      "situation": "需要在短时间内为印尼市场推出OA系统，功能上与国内版相似但需要进行本地化适配。",
                      "task": "基于国内React版经验，使用Vue技术栈快速完成印尼版的开发和本地化工作。",
                      "action": "采用Vue 2、Webpack、Ant Design Vue(antdv)技术栈；复用国内版的设计和架构思路；重点开发符合印尼用户习惯的日期和数字格式化组件；基于tiptap封装antdv富文本编辑器组件满足业务需求。",
                      "result": "在2个月内成功上线印尼版OA系统，富文本编辑模块开发效率相比直接使用原生tiptap提升65%。"
                    },
                    {
                      "id": "star-111",
                      "title": "印尼网络环境优化",
                      "situation": "印尼当地网络基础设施相对薄弱，导致访问速度慢。",
                      "task": "针对印尼网络环境进行专项性能优化。",
                      "action": "实施全面网络传输优化：启用HTTP/2协议；内联关键CSS，异步加载非首屏CSS；采用响应式图片(srcset)和WebP格式；配置CDN全球加速和边缘缓存。",
                      "result": "印尼用户访问系统的首次有效绘制（FMP）时间从平均3.5秒降至1.2秒，性能提升60%；通过BrowserStack测试确保在当地主流浏览器（Chrome、Firefox、UC Browser）上99%兼容性。"
                    }
                  ]
                },
                {
                  "id": "subproject-oa-upgrade",
                  "name": "前端工程体系升级",
                  "type": "subproject",
                  "background": "重构系统架构以提高模块独立性和复用性，支持各产品线快速迭代",
                  "position": "架构师",
                  "stars": [
                    {
                      "id": "star-112",
                      "title": "Monorepo架构重构",
                      "situation": "随着业务发展，出现多个管理系统（OMS、KMG等），系统之间耦合度高，难以独立迭代和部署。",
                      "task": "重构系统架构，提高模块独立性和复用性，支持各产品线快速迭代。",
                      "action": "将原先耦合的OA及其衍生项目拆分为基于turborepo+pnpm的Monorepo架构，各项目独立部署；抽取OA中的公共部分作为共享模块供跨项目共享，利用turborepo高效缓存机制减少构建时间；创建基础项目（oa-next/oms-next/kmg-next），基于自研Slimfit组件库构建新UI。",
                      "result": "平均项目构建时间缩短50%，各产品线可独立迭代发布，共享模块变更自动同步至依赖项目，降低维护成本。"
                    },
                    {
                      "id": "star-113",
                      "title": "微前端渐进式迁移",
                      "situation": "需要在不中断业务运行的情况下完成系统升级。",
                      "task": "设计渐进式迁移方案，确保平滑过渡。",
                      "action": "采用qiankun微前端框架实现新旧系统并行运行；在新基础项目中引入旧OA/OMS/KMG页面，按业务优先级逐步替换核心模块；设计通用微前端通信机制确保跨应用数据一致性。",
                      "result": "成功实现渐进式迁移，新架构上线后系统性能提升40%，前端开发效率提升30%。"
                    },
                    {
                      "id": "star-114",
                      "title": "技术债务清理",
                      "situation": "旧系统积累了大量技术债务，导致维护成本高，功能迭代缓慢。",
                      "task": "系统性清理技术债务，提高代码质量和可维护性。",
                      "action": "清理旧OA中多个版本组件库共存的情况，统一到Slimfit组件库；重构混乱的权限校验逻辑，集中管理分散的权限判断；升级权限判断体系，增加数据权限点和角色判断能力支持；编写自动化脚本批量替换旧权限判断代码。",
                      "result": "代码仓库体积减少30%，组件调用一致性提高90%，权限判断逻辑错误减少85%，开发人员理解和修改权限相关代码的时间缩短70%。"
                    }
                  ]
                }
              ]
            },
            {
              "id": "project-wp",
              "name": "WP系列项目",
              "position": "技术负责人",
              "period": "2022年1月 - 至今",
              "type": "project",
              "background": "基于React、UMI、Tailwind CSS开发的复杂图形显示与编辑功能",
              "stars": [
                {
                  "id": "star-120",
                  "title": "高性能图形渲染",
                  "situation": "项目需要开发停车位地图、仓位图等复杂图形配置界面，要求高性能渲染和交互。",
                  "task": "实现高性能、可配置的图形显示和编辑功能。",
                  "action": "基于React、UMI、Tailwind CSS开发；复用并扩展OA项目中基于Pixi.js的图形渲染引擎经验，优化大数据量下的渲染性能。",
                  "result": "成功交付停车位地图和仓位图配置功能，支持1000+图形元素的流畅显示和交互。"
                },
                {
                  "id": "star-121",
                  "title": "复杂交互优化",
                  "situation": "图形编辑界面需要支持框选和拖拽大规模元素等复杂交互，性能要求高。",
                  "task": "实现高性能框选和多元素操作功能。",
                  "action": "优化框选算法，使用requestAnimationFrame节流重绘操作；对大规模元素操作进行批处理和异步化，避免阻塞UI线程。",
                  "result": "实现流畅的框选体验，支持同时操作1000+元素，用户操作效率提升50%，Grafana监控显示交互响应时间P95稳定在200毫秒内。"
                }
              ]
            },
            {
              "id": "project-finance",
              "name": "资金/财务/风控系统",
              "position": "项目经理",
              "period": "2019年6月 - 2021年12月",
              "type": "project",
              "background": "从零构建满足金融业务需求的资金、财务和风控系统",
              "stars": [
                {
                  "id": "star-130",
                  "title": "金融应用安全开发",
                  "situation": "公司需要从零构建一套资金、财务和风控系统，满足金融业务需求。",
                  "task": "作为项目经理，主导系统前端的技术选型、架构设计和核心功能开发。",
                  "action": "确定使用Vue 2和内部Base-UI组件库作为基础技术栈；遵循前端安全最佳实践（输入验证、输出编码、HTTPS等）进行开发。",
                  "result": "系统按计划成功上线，通过内部安全部门审核，满足金融级应用安全要求，上线后1年内无重大安全事件。"
                },
                {
                  "id": "star-131",
                  "title": "组件库迁移工具",
                  "situation": "公司技术栈升级需要将旧系统UI从Base-UI迁移到新标准组件库@yqg/antd。",
                  "task": "高效准确完成UI组件库迁移工作。",
                  "action": "分析两个组件库的API差异，开发基于AST（抽象语法树）的代码转换工具，自动识别并替换旧组件用法为新组件API调用。",
                  "result": "工具自动完成80%以上页面迁移工作量，整体迁移周期缩短50%，减少大量重复手工操作。"
                },
                {
                  "id": "star-132",
                  "title": "业务组件封装",
                  "situation": "系统中存在大量结构相似的CRUD页面，开发效率需要提升。",
                  "task": "提高基础页面的开发效率和性能。",
                  "action": "封装页面级业务组件（如搜索表单、数据表格、弹窗表单），规范化开发流程。",
                  "result": "基础CRUD页面开发效率提升50%，核心报表页面加载和交互性能提升35%。"
                }
              ]
            }
          ]
        },
        {
          "id": "module-2",
          "title": "基础设施建设",
          "type": "module",
          "children": [
            {
              "id": "project-slimfit",
              "name": "Slimfit组件库",
              "position": "架构师",
              "period": "2023年4月 - 至今",
              "type": "project",
              "background": "设计实现公司新一代标准React组件库",
              "stars": [
                {
                  "id": "star-140",
                  "title": "统一设计规范",
                  "situation": "公司多个B端产品UI风格不一致，组件重复开发，维护成本高。",
                  "task": "主导构建公司新一代标准React组件库Slimfit，统一设计规范。",
                  "action": "使用father 4（基于Rollup）进行组件打包，使用dumi 2构建组件文档和示例网站；基于Ant Design(antd)二次封装和自研，产出40+高质量UI组件。",
                  "result": "Slimfit成为公司B端产品线标准组件库，有效统一产品视觉风格，提升品牌一致性。"
                },
                {
                  "id": "star-141",
                  "title": "组件质量保障",
                  "situation": "需要保证组件库的质量和性能。",
                  "task": "建立全面的组件质量保障体系。",
                  "action": "集成Vitest进行单元测试和快照测试；配置Grafana监控实际项目中组件渲染性能（如首次渲染时间、更新时间）。",
                  "result": "核心组件单元测试覆盖率达70%以上，性能监控发现并优化了3个组件的渲染瓶颈，平均渲染性能P95时间降低40%。"
                }
              ]
            },
            {
              "id": "project-baseui",
              "name": "Base-UI组件库",
              "position": "核心开发",
              "period": "2019年1月 - 2021年5月",
              "type": "project",
              "background": "参与公司第一代Vue 2组件库建设",
              "stars": [
                {
                  "id": "star-150",
                  "title": "高性能组件开发",
                  "situation": "早期Vue项目缺乏高质量、高性能的图表、选择器等基础组件。",
                  "task": "作为核心开发，参与公司第一代Vue 2组件库Base-UI的建设。",
                  "action": "负责表格行/列冻结功能开发；使用虚拟列表技术优化Select、TreeSelect等组件在处理大量数据时的性能。",
                  "result": "成功封装50+UI组件，在公司内部项目中组件复用率达60%，Select等组件支持10000+记录流畅渲染，性能提升200%。"
                },
                {
                  "id": "star-151",
                  "title": "打包优化",
                  "situation": "组件库使用Webpack打包，导致包体积大、加载慢。",
                  "task": "优化组件库打包方式，减小体积并提高加载性能。",
                  "action": "将打包工具从Webpack切换为Rollup，利用其对ES Module的良好支持和更好的tree-shaking效果；配置多种模块格式输出（ESM、CJS）。",
                  "result": "组件库整体打包体积减少15%，按需加载效果提升，使用该库的项目首屏加载速度平均提升30%。"
                }
              ]
            }
          ]
        },
        {
          "id": "module-3",
          "title": "工程效率提升",
          "type": "module",
          "children": [
            {
              "id": "project-cli",
              "name": "CLI工具与构建优化",
              "type": "project",
              "position": "工程化负责人",
              "stars": [
                {
                  "id": "star-160",
                  "title": "内部CLI工具开发",
                  "situation": "项目初始化配置繁琐，本地开发环境启动慢，Webpack构建配置复杂。",
                  "task": "提高前端工程效率和开发者体验。",
                  "action": "开发内部CLI工具（Franky CLI），提供标准化项目模板（React/Vue/Node）；深度优化Webpack构建配置（缓存、DllPlugin等）；引入并推广Vite、esbuild等新一代构建工具。",
                  "result": "新项目初始化时间从30分钟降至5分钟；本地开发服务器启动时间平均降低70%；开发者对工程工具链满意度提升50%。"
                },
                {
                  "id": "star-161",
                  "title": "新员工入职优化",
                  "situation": "新员工加入项目组后，需要较长时间熟悉项目技术栈和开发流程。",
                  "task": "优化新员工的入职和上手体验。",
                  "action": "系统性整理各项目组技术文档，补充缺失内容；编写新员工入职指南，包括环境配置、开发流程和常见问题。",
                  "result": "新员工独立承担开发任务的平均时间从2周缩短至3天。"
                }
              ]
            },
            {
              "id": "project-figma",
              "name": "Figma插件开发",
              "type": "project",
              "position": "工具开发负责人",
              "stars": [
                {
                  "id": "star-170",
                  "title": "设计稿转代码工具",
                  "situation": "设计师交付的设计稿需要前端工程师手动转换为代码或配置，效率低且容易出错。",
                  "task": "自动化设计稿转代码/配置流程。",
                  "action": "开发Figma插件，实现一键提取设计稿元素（如图层、样式）并转换为Pixi.js所需的场景配置JSON或基础React/Vue组件代码。",
                  "result": "特定场景（如Pixi.js配置生成）的开发效率提升100%，设计稿还原度提升40%。"
                }
              ]
            },
            {
              "id": "project-devtools",
              "name": "开发工具链",
              "type": "project",
              "position": "技术负责人",
              "stars": [
                {
                  "id": "star-180",
                  "title": "ESLint自定义插件",
                  "situation": "团队代码规范执行不一致，通用规则难以发现潜在性能和安全风险。",
                  "task": "加强代码规范检查，提高代码质量和安全性。",
                  "action": "开发自定义ESLint插件，包含10+针对公司业务特点和技术栈的规则，用于检测潜在性能瓶颈（如不合理的循环、重复计算）、安全漏洞（如不当使用dangerouslySetInnerHTML）和最佳实践违规。",
                  "result": "通过自定义规则提前发现并修复的代码问题数量增加60%，代码引入的安全风险降低50%。"
                },
                {
                  "id": "star-181",
                  "title": "VS Code插件开发",
                  "situation": "日常开发中存在大量重复操作和信息查询需求。",
                  "task": "开发VS Code插件提高开发效率和便利性。",
                  "action": "开发Franky（VS Code插件）：内置20+常用业务代码片段和页面模板，支持Tailwind CSS类名智能提示和转换，自动生成文件头部注释；开发WebBar（VS Code插件）：在状态栏添加自定义按钮，一键跳转常用内部系统或文档；开发CodeTransformer（VS Code插件）：集成Babel插件能力，支持在编辑器内快速重构和转换代码，支持项目依赖图可视化分析。",
                  "result": "开发者日常编码效率平均提升45%，特定代码重构任务速度提升50%。"
                },
                {
                  "id": "star-182", 
                  "title": "代码迁移工具",
                  "situation": "面对大规模技术栈升级或代码仓库重构（如Vue 2到Vue 3、旧API替换），手动迁移工作量巨大且容易出错。",
                  "task": "开发自动化工具辅助代码迁移。",
                  "action": "基于Babel和jscodeshift开发代码静态分析和自动转换工具；针对特定迁移场景编写codemod脚本。",
                  "result": "在多个代码迁移项目中，自动化工具平均提升迁移效率400%，迁移引入的bug减少90%。"
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "id": 2,
      "company": "前公司",
      "position": "高级前端开发",
      "location": "北京",
      "period": "2016年6月 - 2019年2月",
      "description": "负责前端架构设计与技术选型，主导多个业务系统开发，参与组件库建设与工程优化。",
      "projects": [
        {
          "id": 201,
          "name": "内部工具开发",
          "period": "2017年3月 - 2018年12月",
          "background": "开发工具链提升团队开发效率",
          "type": "project",
          "position": "前端开发负责人",
          "stars": [
            {
              "id": "star-201",
              "situation": "开发流程中存在大量重复工作，项目初始化配置繁琐，本地开发环境启动慢。",
              "task": "提高前端工程效率和开发者体验。",
              "action": "开发内部CLI工具，提供标准化项目模板；深度优化Webpack构建配置；开发VSCode插件，内置常用业务代码片段和页面模板，支持智能提示和转换。",
              "result": "新项目初始化时间从30分钟降至5分钟；本地开发服务器启动时间平均降低70%；开发者日常编码效率平均提升45%。"
            }
          ]
        },
        {
          "id": 202,
          "name": "组件库开发",
          "period": "2016年8月 - 2018年5月",
          "background": "参与设计开发公司基础UI组件库",
          "type": "project",
          "position": "核心开发者",
          "stars": [
            {
              "id": "star-202",
              "situation": "早期项目缺乏高质量、高性能的图表、选择器等基础组件。",
              "task": "参与公司UI组件库建设，提供高性能组件。",
              "action": "负责表格行/列冻结功能开发；使用虚拟列表技术优化Select、TreeSelect等组件在处理大量数据时的性能；将打包工具从Webpack切换为Rollup，利用其对ES Module的良好支持和更好的tree-shaking效果。",
              "result": "成功封装50+UI组件，在公司内部项目中组件复用率达60%；Select等组件支持10000+记录流畅渲染，性能提升200%；组件库整体打包体积减少15%。"
            }
          ]
        }
      ]
    }
  ],
  "education": [
    {
      "id": 1,
      "degree": "学士学位",
      "field": "农业资源与环境",
      "institution": "吉林大学",
      "location": "吉林",
      "period": "2010年9月 - 2014年7月",
      "description": "系统学习农业资源与环境相关专业知识，并自学编程技术，为后续转型前端开发奠定基础。",
      "achievements": [
        "以优异成绩毕业",
        "在校期间自学前端开发技术",
        "参与学生科技创新项目"
      ]
    }
  ],
  "portfolioProjects": [
    {
      "id": 1,
      "title": "我不知道的周刊",
      "description": "AI驱动的前端技术周刊，精选并深度解读Web前端及周边生态的优质内容，涵盖实用工具、开源项目、前沿资讯与最佳实践。采用AI技术智能分析与筛选内容，让开发者持续获取高质量的前端资讯，提升专业素养和技术视野。",
      "image": "/placeholder.svg",
      "technologies": ["Astro", "React", "OpenAI", "Tailwind CSS", "Vercel"],
      "techIds": ["astro", "react", "openai", "tailwind", "vercel"],
      "liveLink": "https://weekly.mengpeng.tech",
      "repoLink": "https://github.com/NorthSeacoder/weekly",
      "featured": true,
      "evolution": ["内容手动整理", "AI辅助筛选", "全流程AI驱动"],
      "related": [4]
    },
    {
      "id": 2,
      "title": "@nsea/xmind-handler",
      "description": "基于Node.js的工具库，用于高效处理XMind文件。支持根据标记过滤主题、将内容转换为JSON、Markdown或精简XMind文件等多种格式。实现了命令行接口简化用户操作，支持多种输出格式，大幅提升思维导图内容处理和转换的效率。",
      "image": "/placeholder.svg",
      "technologies": ["Node.js", "TypeScript", "CLI", "XMind SDK"],
      "techIds": ["nodejs", "typescript", "cli", "xmind"],
      "liveLink": "https://www.npmjs.com/package/@nsea/xmind-handler",
      "repoLink": "https://github.com/NorthSeacoder/xmind-handler",
      "featured": true,
      "evolution": ["基础解析功能", "多格式转换", "命令行工具"],
      "related": [4]
    },
    {
      "id": 3,
      "title": "@codetransformer/find-chinese",
      "description": "高效查询目标文件夹及其依赖文件中所有中文字符的CodeTransformer插件。实现了对复杂项目结构的全面扫描，提供精准的字符定位和统计功能，显著提升了代码审查和国际化工作效率，节省超过30%的时间。广泛应用于多语言支持和国际化项目中。",
      "image": "/placeholder.svg",
      "technologies": ["TypeScript", "AST", "Babel", "VSCode API"],
      "techIds": ["typescript", "ast", "babel", "vscode"],
      "liveLink": "https://www.npmjs.com/package/@codetransformer/find-chinese",
      "repoLink": "https://github.com/NorthSeacoder/find-chinese",
      "featured": true,
      "evolution": ["基础扫描", "依赖追踪", "统计分析"],
      "related": [4,6,7]
    },
    {
      "id": 4,
      "title": "Franky (VSCode)",
      "description": "高效开发者工具VSCode扩展，支持动态模板生成，提供20多个业务模板，简化代码编写流程。支持Tailwindcss类名转换，自动生成文件头注释，无需额外配置，提高日常开发效率。特别适合React、Vue等前端项目快速开发。",
      "image": "/placeholder.svg",
      "technologies": ["TypeScript", "VSCode API", "Template Engine", "Tailwind CSS"],
      "techIds": ["typescript", "vscode", "template", "tailwind"],
      "liveLink": "https://marketplace.visualstudio.com/items?itemName=NorthSeacoder.franky",
      "repoLink": "https://github.com/NorthSeacoder/franky",
      "featured": true,
      "evolution": ["基础代码片段", "模板系统", "智能化辅助"],
      "related": [7]
    },
    {
      "id": 5,
      "title": "WebBar (VSCode)",
      "description": "轻量级便捷工具VSCode扩展，在状态栏中添加可自定义按钮，方便一键访问常用网页，提升开发便捷性。完全可配置的按钮系统让开发者能快速访问文档、管理系统、测试环境等常用资源，减少工作流中的上下文切换成本。",
      "image": "/placeholder.svg",
      "technologies": ["TypeScript", "VSCode API", "WebView"],
      "techIds": ["typescript", "vscode", "webview"],
      "liveLink": "https://marketplace.visualstudio.com/items?itemName=NorthSeacoder.webbar",
      "repoLink": "https://github.com/NorthSeacoder/web-bar",
      "featured": false,
      "evolution": ["固定链接", "自定义配置", "上下文感知"],
      "related": [4]
    },
    {
      "id": 6,
      "title": "CodeTransformer (VSCode)",
      "description": "强大的代码转换VSCode插件，提供官方babel-plugin及自定义plugin支持，优化代码重构流程，代码重构效率提升50%。支持搜索目标文件或文件夹依赖，递归构建依赖图谱，结合tsconfig path拼接路径，确保迁移无遗漏。在大型项目重构中表现尤为突出，是团队技术升级的得力助手。",
      "image": "/placeholder.svg",
      "technologies": ["TypeScript", "Babel", "AST", "依赖分析"],
      "techIds": ["typescript", "babel", "ast", "dependency-analysis"],
      "liveLink": "https://marketplace.visualstudio.com/items?itemName=NorthSeacoder.codetransformer",
      "repoLink": "https://github.com/NorthSeacoder/code-transformer",
      "featured": true,
      "evolution": ["基础转换", "依赖追踪", "智能重构"],
      "related": [3, 7]
    },
    {
      "id": 7,
      "title": "@nsea/depseeker",
      "description": "专业的Node.js依赖分析工具，用于快速扫描和分析项目依赖关系。能够递归构建依赖图谱，支持复杂依赖解析，识别循环依赖和潜在问题。支持ES模块和CommonJS模块，结合tsconfig路径映射提供准确的依赖图分析，是大型项目重构和代码优化的理想工具。",
      "image": "/placeholder.svg",
      "technologies": ["Node.js", "TypeScript", "依赖分析", "AST"],
      "techIds": ["nodejs", "typescript", "dependency-analysis", "ast"],
      "liveLink": "https://www.npmjs.com/package/@nsea/depseeker",
      "repoLink": "https://github.com/NorthSeacoder/depseeker",
      "featured": true,
      "evolution": ["简单依赖解析", "循环依赖检测", "复杂项目支持"],
      "related": [2, 6]
    }
  ]
} 
