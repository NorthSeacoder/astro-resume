{
    "about": {
        "bio": "拥有 8 年现代前端开发与 4 年团队管理经验，专注于中后台系统架构与工程化建设，主导并参与十余个大型系统的技术选型、架构重构与性能优化。具备深厚的前端微服务、组件库和自动化工程工具实战基础，精于跨部门协作与团队成长管理，持续通过创新提升项目交付质量与开发效能。",
        "stats": {
            "yearsExperience": "8+",
            "projectsCompleted": 20,
            "happyClients": 15,
            "yearsDescription": "前端开发与团队管理经验",
            "projectsDescription": "大型中后台系统开发",
            "clientsDescription": "跨行业客户合作"
        },
        "keyPoints": [
            "深耕现代前端架构与工程化体系，主导多个复杂中后台系统研发、架构重构与团队管理，实现高质量上线与敏捷交付。",
            "具备卓越的团队领导力和技术推动力，系统落地工程规范、工具链自动化和知识沉淀，打造高效协作团队，提升整体研发体验与交付效率。",
            "主导前端技术栈升级、微前端/Monorepo 架构创新和统一组件库建设，显著提升大型应用的可维护性、可扩展性与开发效率。"
        ]
    },
    "skills": {
        "categories": [
            {
                "id": 1,
                "name": "前端基础技术",
                "icon": "Code",
                "skills": [
                    {
                        "name": "JavaScript/TypeScript",
                        "level": "Expert",
                        "description": "8 年 JavaScript 实战开发经验，深度掌握 ES6+ 语言特性及主流设计模式，理解异步编程与类型系统。4 年 TypeScript 工程实践，善于在复杂系统中灵活运用类型推导与高级类型优化开发体验与代码健壮性。",
                        "percentage": 95,
                        "keywords": ["ES6+", "TypeScript", "HTML5", "CSS3"]
                    },
                    {
                        "name": "React生态",
                        "level": "Expert",
                        "description": "6 年 React 项目主导经验，理解从 Class 组件至 Hooks 的演进历程和底层原理，深入理解虚拟 DOM 与 Fiber 架构。擅长大型表单与动态列表场景的高性能优化，全面推动工程最佳实践落地。",
                        "percentage": 95,
                        "keywords": ["React", "Hooks", "Redux", "性能优化"]
                    },
                    {
                        "name": "Vue生态",
                        "level": "Expert",
                        "description": "丰富的 Vue 2/3 项目技术实战，擅长本地化产品研发，精通响应式系统和 Composition API 复杂组件重构。具备组件库开发与系统维护落地经验。",
                        "percentage": 90,
                        "keywords": ["Vue", "Vuex", "Vue Router", "组件库"]
                    },
                    {
                        "name": "性能与网络",
                        "level": "Expert",
                        "description": "深入理解浏览器渲染原理、V8 优化、Web 应用性能调优。拥有多维度资源加载、渲染性能、网络协议的系统优化与落地能力。",
                        "percentage": 90,
                        "keywords": ["性能优化", "浏览器原理", "HTTP优化", "资源加载"]
                    },
                    {
                        "name": "UI组件开发",
                        "level": "Expert",
                        "description": "主导多套企业级组件库核心设计与开发，包括 antd 深度二次开发及自研组件方案，擅长高性能复杂组件抽象与组件设计体系标准化，驱动前端研发效率与复用率跃升。",
                        "percentage": 90,
                        "keywords": ["组件库", "antd", "性能组件", "设计系统"]
                    }
                ]
            },
            {
                "id": 2,
                "name": "工程化体系",
                "icon": "Zap",
                "skills": [
                    {
                        "name": "构建与优化",
                        "level": "Expert",
                        "description": "主导数个大型项目构建性能深度优化，将典型业务构建耗时由 8 分钟降至 3 分钟。精通 Webpack 高级优化（持久化缓存、并发构建等），积极引入 Vite 重塑开发体验与协作速度。",
                        "percentage": 95,
                        "keywords": ["Webpack", "Vite", "Rollup", "构建优化"]
                    },
                    {
                        "name": "工程化工具链",
                        "level": "Expert",
                        "description": "具备完整前端工程自动化体系搭建与落地经验，从 CLI、规范、自动化测试、CI/CD 流程一体化推动团队持续交付创新。",
                        "percentage": 90,
                        "keywords": ["CLI", "ESLint", "自动化测试", "CI/CD"]
                    },
                    {
                        "name": "Monorepo工程",
                        "level": "Expert",
                        "description": "主导大型系统迭代引入 pnpm+Turborepo Monorepo 架构，极大提升多产品线代码共享、高效依赖管理与独立部署效率，推动模块动态集成与敏捷发布。",
                        "percentage": 90,
                        "keywords": ["Monorepo", "pnpm", "turborepo", "工程化"]
                    },
                    {
                        "name": "微前端架构",
                        "level": "Advanced",
                        "description": "在技术栈升级中主导 qiankun 微前端落地，实现新旧系统平滑融合及渐进式架构升级，显著提升系统可扩展性与模块独立演进能力。",
                        "percentage": 85,
                        "keywords": ["微前端", "qiankun", "应用集成", "技术升级"]
                    },
                    {
                        "name": "自动化工具开发",
                        "level": "Expert",
                        "description": "主导开发 VSCode/Figma 等产研提效插件，实现定制化 AST 转换工具与自动化脚本，系统提升团队开发效率与代码一致性。",
                        "percentage": 90,
                        "keywords": ["VSCode插件", "Figma插件", "AST", "代码转换"]
                    }
                ]
            },
            {
                "id": 3,
                "name": "专业领域技术",
                "icon": "BrainCircuit",
                "skills": [
                    {
                        "name": "企业微信应用开发",
                        "level": "Expert",
                        "description": "主导企业微信多端架构，构建高复用性代码体系，解决企业微信环境下的能力兼容、弱网优化和安全交互等核心技术挑战。",
                        "percentage": 90,
                        "keywords": ["企业微信JSSDK", "小程序", "H5应用", "多端开发"]
                    },
                    {
                        "name": "数据可视化",
                        "level": "Advanced",
                        "description": "深入应用 ECharts、大型 Pixi.js 图形引擎，实现高性能数据可视交互，具备支撑复杂多维数据大规模渲染与编辑的架构能力。",
                        "percentage": 85,
                        "keywords": ["ECharts", "Pixi.js", "图形渲染", "交互设计"]
                    },
                    {
                        "name": "国际化体系",
                        "level": "Expert",
                        "description": "主导前端国际化解决方案设计，覆盖多语言、动态加载、本地化适配与文案一致性管控，持续为多个全球化产品提供高标准国际化支撑。",
                        "percentage": 90,
                        "keywords": ["i18next", "多语言", "本地化", "文案管理"]
                    },
                    {
                        "name": "前端监控",
                        "level": "Advanced",
                        "description": "搭建企业级前端性能和异常监控体系，集成 Sentry、Web Vitals、Grafana 等平台，实时量化用户体验，驱动全链路性能优化和稳定性运营。",
                        "percentage": 85,
                        "keywords": ["性能监控", "错误追踪", "用户行为", "监控告警"]
                    }
                ]
            }
        ]
    },
    "experiences": [
        {
            "id": 1,
            "company": "北京瓴岳科技",
            "position": "前端开发工程师",
            "location": "北京",
            "period": "2019年3月 - 至今",
            "description": "主导前端架构升级、性能优化及工程化体系落地，搭建统一组件库和自动化工具链，实现跨部门高效协作。深度参与多个大型系统的重构、团队技术管理和提效创新，持续提升技术影响力和业务敏捷性。",
            "items": [
                {
                    "id": "oa-1",
                    "title": "国内OA（React）",
                    "type": "OA系统及衍生产品线",
                    "category": "业务系统相关",
                    "period": "2020年3月 - 至今",
                    "position": "架构师",
                    "summary": "基于React、Webpack、Vite、WebSocket、Ant Design、i18next、Redux、Redux-Saga的高性能OA系统前端开发，主导性能优化与国际化、可视化配置、WebSocket优化、安全加固、构建优化、性能监控等。",
                    "achievements": [
                        {
                            "id": "star-101",
                            "title": "列表性能优化",
                            "situation": "系统核心模块存在超大型列表，导致首屏渲染和页面切换响应慢，影响用户流畅体验。",
                            "task": "优化首屏渲染性能，提升大数据量业务场景的响应速度。",
                            "action": "引入虚拟列表与懒加载策略，通过 React Profiler 精准定位瓶颈，对复杂表单组件进行重构，采用 react-lazy-with-preload 优化路由懒加载，实现全链路性能提升。",
                            "result": "大型列表平均渲染时间优化至 800ms，页面切换响应提升 40%，整体用户体验显著改善。"
                        },
                        {
                            "id": "star-102",
                            "title": "多语言支持方案",
                            "situation": "产品业务快速扩展，需适配多语言地区，提升国际市场投放能力。",
                            "task": "落地灵活可扩展的前端国际化方案，消除代码切换与文案同步难题。",
                            "action": "集成 i18next 及 JSON 动态语言包，构建多语言配置及自动加载机制，完善多维本地化格式和实时监控，保障翻译完整性与准确率。",
                            "result": "系统上线 4 种语言，翻译错误较原有减少 95%，支撑快速国际推广，显著增强产品竞争力。"
                        },
                        {
                            "id": "star-103",
                            "title": "工位图配置流程优化",
                            "situation": "传统工位配置流程繁琐、协同成本高，开发和配置迭代耗时久。",
                            "task": "通过自动化和可视化工具赋能业务部门，提升整体配置效率。",
                            "action": "开发 Figma 插件自动提取配置，二阶段建设可视化工位配置平台，实现流程闭环与降本提效。",
                            "result": "工位配置总时长由 4.5 人日缩短至 0.5 人日，极大降低出错率与人力消耗。"
                        },
                        {
                            "id": "star-104",
                            "title": "WebSocket实时功能优化",
                            "situation": "实时通信存在高延迟和断连问题，影响关键消息推送与业务联动。",
                            "task": "提升 WebSocket 通信质量和业务实时性保障。",
                            "action": "设计指数退避自动重连以及 MessagePack 数据压缩策略，优化心跳检测与消息流，全面覆盖通知/协同业务核心场景。",
                            "result": "消息平均延迟降低 40%，即时同步体验实现飞跃，用户实时感知问题下降 80%。"
                        },
                        {
                            "id": "star-105",
                            "title": "前端安全增强",
                            "situation": "OA 系统含敏感数据，对前端安全提出更高标准。",
                            "task": "全方位加强前端安全防护，规避主流漏洞风险。",
                            "action": "推行 CSP、转义校验、CSRF Token 及敏感数据水印，建立完整安全审计流程。",
                            "result": "重大漏洞风险 0，安全评分大幅提升，敏感数据安全事故数量显著减少。"
                        },
                        {
                            "id": "star-106",
                            "title": "构建优化与开发体验提升",
                            "situation": "工程复杂度提升后，Webpack 构建和本地热更新缓慢，影响研发效率。",
                            "task": "缩短构建与本地开发启动时间，提升团队编码体验。",
                            "action": "深度优化 Webpack 多核、缓存、tree-shaking 配置，引入 Vite 加速本地开发环境,完善代码热更新流程。",
                            "result": "编译构建用时缩短 35%，本地启动效率提升 90%。"
                        },
                        {
                            "id": "star-107",
                            "title": "性能监控体系搭建",
                            "situation": "缺乏实时性能/异常监控，潜在问题难以提前发现与治理。",
                            "task": "建立端到端性能与业务可用性自动化监控与告警体系。",
                            "action": "集成 Sentry、Web Vitals 及业务自定义埋点，接入 Grafana 可视化和告警，推动主动预警和优化机制建设。",
                            "result": "性能数据实时可追溯，问题自发现率提升 60%，整体上线质量与稳定性持续增强。"
                        }
                    ]
                },
                {
                    "id": "oa-2",
                    "title": "企业微信应用",
                    "type": "OA系统及衍生产品线",
                    "category": "业务系统相关",
                    "period": "",
                    "position": "架构师",
                    "summary": "主导设计支持 PC 端 与移动端的多端复用业务架构，通过 Monorepo 与跨端组件抽象，实现 70% 业务代码与 UI 组件双端一致并共享。推动统一规范、工具链和研发最佳实践，显著提升团队交付效率。",
                    "achievements": [
                        {
                            "id": "star-108",
                            "title": "跨平台技术架构设计",
                            "situation": "需同步高效交付 PC 与移动企业微信应用，减少冗余与不一致开发。",
                            "task": "搭建高复用、统一标准的多端架构和组件库。",
                            "action": "通过 pnpm Monorepo 管理、沉淀通用 Hook、响应式组件等策略，配合严格 lint 规则提效守护代码一致性。",
                            "result": "跨端核心复用率达 70%，新需求开发周期缩短 30%，多端协作体验提升显著。"
                        },
                        {
                            "id": "star-109",
                            "title": "移动端性能优化",
                            "situation": "移动端白屏及网络延迟影响业务推广和用户体验。",
                            "task": "突破弱网环境加载瓶颈，大幅提升移动首屏性能。",
                            "action": "优化数据抢先加载、HTTP 缓存、资源分割与 on-demand 加载，实现 react-query 集成和页面资源动态优先策略。",
                            "result": "核心页面 P95 白屏时长下降 50%，移动访问流畅性行业领先。"
                        }
                    ]
                },
                {
                    "id": "oa-3",
                    "title": "印尼OA（Vue）",
                    "type": "OA系统及衍生产品线",
                    "category": "业务系统相关",
                    "period": "",
                    "position": "核心开发",
                    "summary": "主导印尼部门本地化 OA 系统研发，通过快速组件适配、复杂网络环境优化及跨团队资源整合，实现本地上线高标准交付。",
                    "achievements": [
                        {
                            "id": "star-110",
                            "title": "快速本地化开发",
                            "situation": "需要在短时间内为印尼市场推出OA系统，功能上与国内版相似但需要进行本地化适配。",
                            "task": "基于国内React版经验，使用Vue技术栈快速完成印尼版的开发和本地化工作。",
                            "action": "采用Vue 2、Webpack、Ant Design Vue(antdv)技术栈；复用国内版的设计和架构思路；重点开发符合印尼用户习惯的日期和数字格式化组件；基于tiptap封装antdv富文本编辑器组件满足业务需求。",
                            "result": "在2个月内成功上线印尼版OA系统，富文本编辑模块开发效率相比直接使用原生tiptap提升65%。"
                        },
                        {
                            "id": "star-111",
                            "title": "印尼网络环境优化",
                            "situation": "弱网及浏览器分散影响访问速度和兼容性。",
                            "task": "系统性优化弱网性能和主流兼容性。",
                            "action": "采用 HTTP/2、CDN 边缘缓存、WebP 图片与关键资源异步加载，兼容当地主流浏览器。",
                            "result": "FMP 首屏渲染缩短 60%，实现 99% 主流环境高兼容。"
                        }
                    ]
                },
                {
                    "id": "oa-4",
                    "title": "前端工程体系升级",
                    "type": "OA系统及衍生产品线",
                    "category": "业务系统相关",
                    "period": "",
                    "position": "架构师",
                    "summary": "全面推进 OA/OMS/KMG 等大型单体架构向 Monorepo+微前端方向演进，分阶段解耦业务、分层技术债务清理、提升工程协作效率，实现业务线独立迭代与敏捷交付。",
                    "achievements": [
                        {
                            "id": "star-112",
                            "title": "Monorepo架构重构",
                            "situation": "系统能力与演进迟缓：当前OA是一个大型单体应用，衍生出OMS/ECOMS/KMG等变体，代码耦合导致迭代效率低下、维护成本高昂、CI/CD效率低下（每次构建需8分钟）。",
                            "task": "重构系统架构，提高模块独立性和复用性，支持各产品线快速迭代。",
                            "action": "精心设计三阶段拆分方案：1) 基于pnpm+Turborepo初始化Monorepo，将OMS相关代码剥离至packages/oms，提取共享代码至shared-core和shared-legacy-ui；2) 创建现代技术栈的oms-next（React 18/AntD 5），配置微前端方案集成旧oms；3) 基于slimfit组件库，按模块逐步重写替换旧功能。",
                            "result": "平均项目构建时间缩短50%，各产品线可独立迭代发布，共享模块变更自动同步至依赖项目，降低维护成本。"
                        },
                        {
                            "id": "star-113",
                            "title": "微前端渐进式迁移",
                            "situation": "系统技术栈老旧（React 16/AntD 4），需要升级到现代技术栈（React 18/AntD 5），但不能中断业务运行，必须平滑过渡。",
                            "task": "设计渐进式迁移方案，确保平滑过渡。",
                            "action": "评估并采用qiankun微前端框架（对比MF和内部方案），配置oms-next作为主应用，旧oms为子应用；设计路由集成方案，按模块/页面逐步替换策略；构建主子应用通信机制，确保跨应用数据一致性；设计完整测试用例验证新旧系统整合的稳定性。",
                            "result": "成功实现渐进式迁移，新架构上线后系统性能提升40%，前端开发效率提升30%。"
                        },
                        {
                            "id": "star-114",
                            "title": "技术债务清理",
                            "situation": "系统历史悠久，积累大量技术债务：存在多个版本组件库并存、Class组件和函数式组件混用、两版权限校验函数、大量条件判断语句等，导致维护成本高，功能迭代缓慢。",
                            "task": "系统性清理技术债务，提高代码质量和可维护性。",
                            "action": "采用结构化方法管理变体差异（基于.env和config.ts取代if/else条件判断）；将复杂业务逻辑剥离至共享包（shared-core/shared-legacy-ui）；清理多版本组件库，统一到Slimfit；重构权限校验体系，升级为支持数据权限点和角色判断；编写自动化代码转换脚本批量重构旧代码。",
                            "result": "代码仓库体积减少30%，组件调用一致性提高90%，权限判断逻辑错误减少85%，开发人员理解和修改权限相关代码的时间缩短70%。"
                        }
                    ]
                },
                {
                    "id": "wp-1",
                    "title": "WP系列项目",
                    "category": "业务系统相关",
                    "period": "2022年1月 - 至今",
                    "position": "前端主程",
                    "summary": "基于React、UMI、Tailwind CSS开发的复杂图形显示与编辑功能，主导高性能渲染、复杂交互与组件复用。",
                    "achievements": [
                        {
                            "id": "star-120",
                            "title": "高性能图形渲染",
                            "situation": "项目需要开发停车位地图、仓位图等复杂图形配置界面，要求高性能渲染和交互。",
                            "task": "实现高性能、可配置的图形显示和编辑功能。",
                            "action": "基于React、UMI、Tailwind CSS开发；复用并扩展OA项目中基于Pixi.js的图形渲染引擎经验，优化大数据量下的渲染性能。",
                            "result": "成功交付停车位地图和仓位图配置功能，支持1000+图形元素的流畅显示和交互。"
                        },
                        {
                            "id": "star-121",
                            "title": "复杂交互优化",
                            "situation": "图形编辑界面需要支持框选和拖拽大规模元素等复杂交互，性能要求高。",
                            "task": "实现高性能框选和多元素操作功能。",
                            "action": "优化框选算法，使用requestAnimationFrame节流重绘操作；对大规模元素操作进行批处理和异步化，避免阻塞UI线程。",
                            "result": "实现流畅的框选体验，支持同时操作1000+元素，用户操作效率提升50%，Grafana监控显示交互响应时间P95稳定在200毫秒内。"
                        }
                    ]
                },
                {
                    "id": "fin-1",
                    "title": "资金/财务/风控系统",
                    "category": "业务系统相关",
                    "period": "2019年6月 - 2021年12月",
                    "position": "前端负责人",
                    "summary": "作为系统前端负责人，从零设计金融级安全与合规资金系统架构，主导业务组件抽象及自动化迁移工具开发，快速完成技术升级与高质量交付保障。",
                    "achievements": [
                        {
                            "id": "star-130",
                            "title": "金融应用安全开发",
                            "situation": "从零构建资金、财务和风控系统，满足金融业务需求。",
                            "task": "作为前端负责人，主导系统前端的技术选型、架构设计和核心功能开发。",
                            "action": "确定使用Vue 2和内部Base-UI组件库作为基础技术栈；遵循前端安全最佳实践（输入验证、输出编码、HTTPS等）进行开发。",
                            "result": "系统按计划成功上线，通过内部安全部门审核，满足金融级应用安全要求，上线后1年内无重大安全事件。"
                        },
                        {
                            "id": "star-131",
                            "title": "组件库迁移工具",
                            "situation": "公司技术栈升级需要将旧系统UI从Base-UI迁移到新标准组件库@yqg/antd。",
                            "task": "高效准确完成UI组件库迁移工作。",
                            "action": "分析两个组件库的API差异，开发基于AST（抽象语法树）的代码转换工具，自动识别并替换旧组件用法为新组件API调用。",
                            "result": "工具自动完成80%以上页面迁移工作量，整体迁移周期缩短50%，减少大量重复手工操作。"
                        },
                        {
                            "id": "star-132",
                            "title": "业务组件封装",
                            "situation": "系统中存在大量结构相似的CRUD页面，开发效率需要提升。",
                            "task": "提高基础页面的开发效率和性能。",
                            "action": "封装页面级业务组件（如搜索表单、数据表格、弹窗表单），规范化开发流程。",
                            "result": "基础CRUD页面开发效率提升50%，核心报表页面加载和交互性能提升35%。"
                        }
                    ]
                },
                {
                    "id": "inf-1",
                    "title": "Slimfit组件库",
                    "type": "基础设施建设",
                    "category": "基础设施相关",
                    "period": "2023年4月 - 至今",
                    "position": "架构师",
                    "summary": "面对公司内多个B端产品UI风格不统一、组件重复开发的痛点，设计并构建基于antd 5的企业级React组件库，融入公司设计规范，创新实现主题引擎、图标系统、字体规范和Tailwind集成方案，显著提升内部开发效率。",
                    "achievements": [
                        {
                            "id": "inf-1-1",
                            "title": "统一设计规范",
                            "situation": "公司B端产品UI停留在AntD 4时代，视觉风格陈旧；各团队重复进行样式定制，效率低下且易出错；特定设计规范（色板、字体、图标体系）难以系统性落地。",
                            "task": "主导建设公司新一代标准React组件库Slimfit，统一设计规范。",
                            "action": "设计创新的主题引擎，将设计规范注入antd 5；在src/theme/tokens.ts定义antdTokenOverrides和customTokens，注入所有设计标准色；在src/theme/components.ts定义componentOverrides进行组件精细调整；基于father 4（Rollup）进行组件打包，使用dumi 2构建文档站点。",
                            "result": "Slimfit成为公司B端产品线的标准组件库，有效统一了产品视觉风格，提升了品牌一致性。"
                        },
                        {
                            "id": "inf-1-2",
                            "title": "自建图标系统",
                            "situation": "公司使用的Arco图标需要样式修改（如线条粗细）并增加大量内部专用图标，直接依赖原库无法满足需求。",
                            "task": "构建统一管理的企业级图标体系。",
                            "action": "在slimfit内自建图标系统：在src/icons/svgs/目录维护SVG源文件；创建BaseIcon组件提供统一props和默认样式（如fill、stroke、width等）；开发自动化工具将SVG转换为React组件；统一设置线条粗细、对齐等视觉属性。",
                            "result": "图标资产集中管理，样式统一，新增修改方便，开发调用简单一致，为40+内部项目提供了统一的图标解决方案。"
                        },
                        {
                            "id": "inf-1-3",
                            "title": "多技术栈兼容方案",
                            "situation": "公司内存在使用Tailwind CSS的项目，与antd定制样式可能存在冲突；需要确保所有项目统一应用指定的品牌字体。",
                            "task": "设计跨技术栈的设计规范共享机制。",
                            "action": "开发字体管理解决方案：制作独立fonts.css并托管字体文件；构建创新的Tailwind Preset：创建tailwind.preset.js将slimfit的token映射为Tailwind配置（颜色、圆角、间距等），支持项目一行代码引入所有设计规范；实现一键配置的SlimfitProvider组件。",
                            "result": "极大简化了不同技术栈项目接入设计规范的流程，B端产品的整体视觉差异减少30%，新项目接入时间缩短50%，设计满意度提升25%。"
                        }
                    ]
                },
                {
                    "id": "inf-2",
                    "title": "Base-UI组件库",
                    "type": "基础设施建设",
                    "category": "基础设施相关",
                    "period": "2019年1月 - 2021年5月",
                    "position": "核心开发",
                    "summary": "参与公司第一代Vue 2组件库Base-UI的建设，负责开发表格的行/列冻结功能，使用虚拟列表优化大数据量下的性能，将打包工具从Webpack切换至Rollup优化组件库体积与加载性能。",
                    "achievements": [
                        {
                            "id": "inf-2-1",
                            "title": "高性能组件开发",
                            "situation": "早期Vue项目缺乏高质量、高性能的图表、选择器等基础组件。",
                            "task": "作为核心开发者，参与公司第一代Vue 2组件库Base-UI的建设。",
                            "action": "负责开发表格的行/列冻结功能；使用虚拟列表技术优化Select、TreeSelect等组件在处理大数据量时的性能。",
                            "result": "成功封装50余个UI组件，组件在公司内部项目复用率达到60%，Select等组件支持1万条以上数据的流畅渲染，性能提升200%。"
                        },
                        {
                            "id": "inf-2-2",
                            "title": "组件库打包优化",
                            "situation": "组件库采用Webpack打包，体积较大，加载较慢。",
                            "task": "优化组件库的打包方式，减小体积，提升加载性能。",
                            "action": "将打包工具从Webpack切换为Rollup，利用其对ES Module的良好支持和更优的tree-shaking效果；配置输出多种模块化格式(ESM, CJS)。",
                            "result": "组件库整体打包体积减少15%，按需加载效果更佳，使用该库的项目首屏加载速度平均提升30%。"
                        }
                    ]
                },
                {
                    "id": "tool-1",
                    "title": "开发脚本与工具链建设",
                    "type": "",
                    "category": "工程提效相关",
                    "period": "2021年3月 - 至今",
                    "position": "工程化负责人",
                    "summary": "主导全流程自动化工具链与标准模板体系建设，极大简化新项目初始化、工程升级和团队新人环境配置，实现高效协作与稳定交付。",
                    "achievements": [
                        {
                            "id": "tool-1-1",
                            "title": "项目模板标准化",
                            "situation": "项目初始化配置繁琐，本地开发环境启动慢，Webpack构建配置复杂。",
                            "task": "提升前端工程化效率和开发者体验。",
                            "action": "开发标准化的项目模板（React/Vue/Node）；深度优化Webpack构建配置（缓存、DllPlugin等）；引入并推广Vite和esbuild等新一代构建工具；创建项目初始化脚本，自动完成基础配置、Git Hooks设置和依赖安装。",
                            "result": "新项目初始化时间从30分钟缩短至5分钟；本地开发服务器启动时间平均减少70%；开发者对工程化工具链的满意度提升50%。"
                        },
                        {
                            "id": "tool-1-2",
                            "title": "新员工入职优化",
                            "situation": "新员工加入项目组后，熟悉项目技术栈和开发流程的时间较长；开发环境配置过程繁琐且容易出错。",
                            "task": "优化新员工的入职和上手体验，简化环境配置。",
                            "action": "系统性地梳理各项目组的技术文档，补充缺失内容；编写新员工入职指南，包含环境配置、开发流程、常见问题等；开发基于Homebrew的一键环境配置脚本(setup.sh)，自动安装所需软件包(Node.js、Docker、Git等)并完成基础配置，如Git config、SSH key生成、npm registry设置等。",
                            "result": "新员工独立承担开发任务的平均时间从2周缩短至3天；开发环境配置时间从半天降至15分钟，大幅降低入职初期挫折感；环境配置相关问题减少75%。"
                        },
                        {
                            "id": "tool-1-3",
                            "title": "自动化代码迁移工具",
                            "situation": "项目技术栈升级（如React 16到18，Antd 4到5）过程中，手动调整API和组件用法工作量巨大。",
                            "task": "构建自动化工具简化升级过程，降低出错率。",
                            "action": "开发一系列Node.js脚本，使用AST技术自动识别并替换过时API；构建项目依赖图谱分析工具，识别潜在影响范围；编写针对antd、react-router等常用库的专用转换规则；设计批量执行和回滚机制，确保转换过程可控。",
                            "result": "React 18升级项目的代码调整工作量减少70%，手动替换约1000处代码点的工作被自动化完成；API错误使用的检出率提高到95%，避免了大量潜在运行时错误。"
                        }
                    ]
                },
                {
                    "id": "tool-2",
                    "title": "Figma扩展开发",
                    "type": "",
                    "category": "工程提效相关",
                    "period": "2022年6月 - 至今",
                    "position": "工具开发负责人",
                    "summary": "开发Figma插件，实现设计稿元素一键提取并转换为Pixi.js所需的场景配置JSON或React/Vue组件代码，显著提升开发效率和设计还原度。",
                    "achievements": [
                        {
                            "id": "tool-2-1",
                            "title": "设计稿转代码工具",
                            "situation": "设计师交付的设计稿需要前端工程师手动转换为代码或配置，效率低下且易出错。",
                            "task": "自动化设计稿到代码/配置的转换过程。",
                            "action": "开发Figma插件，实现设计稿元素（如图层、样式）一键提取并转换为Pixi.js所需的场景配置JSON或基础的React/Vue组件代码。",
                            "result": "特定场景（如Pixi.js配置生成）的开发效率提升100%，设计稿还原度提高40%。"
                        }
                    ]
                },
                {
                    "id": "tool-3",
                    "title": "VSCode扩展开发",
                    "type": "",
                    "category": "工程提效相关",
                    "period": "2020年8月 - 至今",
                    "position": "开发工具负责人",
                    "summary": "自主开发全系 VSCode 扩展和工具链，涵盖模板自动生成、批量重构与依赖分析，提升团队协作与大型系统维护效率。",
                    "achievements": [
                        {
                            "id": "tool-3-2",
                            "title": "Franky",
                            "situation": "日常开发中存在较多重复性操作和模板代码编写需求。",
                            "task": "开发VSCode插件提升开发效率和便捷性。",
                            "action": "开发Franky VSCode插件，实现三大核心功能：1) fileheader自动生成和更新文件头注释；2) 基于Figma样式一键生成对应的Tailwind CSS类名；3) 动态模板系统支持本地/远程模板仓库，通过WebView填写变量后生成对应代码。所有功能无需额外配置即可使用。",
                            "result": "开发者日常编码效率平均提升45%，模板代码生成时间减少90%，样式还原准确度提高60%。"
                        },
                        {
                            "id": "tool-3-3",
                            "title": "WebBar",
                            "situation": "开发过程中经常需要切换不同系统、查询文档和使用内部工具，上下文切换频繁。",
                            "task": "简化常用资源访问，减少工作流中的上下文切换。",
                            "action": "开发WebBar VSCode插件，在编辑器状态栏添加可自定义按钮，一键访问常用网页；支持自定义配置和分组管理链接；在插件内实现简易浏览器预览功能，避免切换窗口。",
                            "result": "开发者工作流上下文切换时间减少35%，常用资源访问效率提升70%，新同事熟悉内部系统的时间缩短50%。"
                        },
                        {
                            "id": "tool-3-4",
                            "title": "CodeTransformer",
                            "situation": "代码重构和升级过程中，大量重复性代码转换工作需要手动完成，耗时且易出错。",
                            "task": "构建VSCode内的代码转换工具，提高代码重构效率和准确性。",
                            "action": "开发CodeTransformer插件，集成Babel进行代码快速重构，支持中文查找、依赖图谱分析等高级功能；提供可视化操作界面，支持官方及自定义babel插件；实现依赖图谱可视化和分析，结合tsconfig路径映射确保代码迁移无遗漏。",
                            "result": "代码重构效率提升400%，特定转换任务（如组件库API升级）准确率达95%，大型项目依赖分析时间从小时级降至分钟级，成为团队技术升级的关键工具。"
                        },
                        {
                            "id": "tool-3-5",
                            "title": "自动化代码迁移工具",
                            "situation": "面临大规模技术栈升级或代码库重构，手动迁移工作量巨大且易出错。",
                            "task": "开发自动化工具辅助代码迁移。",
                            "action": "基于Babel和jscodeshift开发代码静态分析和自动转换工具；编写针对具体迁移场景的codemod脚本；集成到CodeTransformer插件中实现可视化操作。",
                            "result": "在多次代码迁移项目中，自动化工具将迁移效率平均提升400%，由迁移引入的Bug数量减少90%。"
                        }
                    ]
                }
            ]
        },
        {
            "id": 3,
            "company": "房天下",
            "position": "主程/前端开发",
            "location": "北京",
            "period": "2017年11月 - 2019年3月",
            "description": "负责多业务系统前端及数据可视产品的全流程开发与持续优化，主导技术架构、性能提升和规范建设，驱动产品研发自动化与工程协同效率升级。",
            "items": [
                {
                    "id": "fang-1",
                    "title": "三房活动",
                    "period": "2017年11月 - 2019年3月",
                    "position": "主程",
                    "category": "业务系统相关",
                    "summary": "独立负责项目构建，集成Webpack打包与Babel编译，优化构建流程，提升开发效率20%。采用Express框架开发Web层Controller，设计并实现稳定高效的接口服务。使用Vue与Vue-router构建前端页面，实现动态路由与流畅交互，提升用户体验。",
                    "achievements": [
                        {
                            "id": "fang-1-1",
                            "title": "构建流程优化",
                            "situation": "初始项目构建脚本繁琐影响开发效率。",
                            "task": "精简构建流程实现自动化。",
                            "action": "Webpack+Babel 集成优化构建脚本，提升开发体验。",
                            "result": "效率提升 20%，构建质量和稳定性同步加强。"
                        },
                        {
                            "id": "fang-1-2",
                            "title": "高效接口服务设计",
                            "situation": "业务接口需支撑高并发且高稳定性需求。",
                            "task": "开发高性能稳定接口服务。",
                            "action": "Express 框架打造 Web Controller，优化接口结构及性能。",
                            "result": "接口服务表现优异，支撑大流量并发无压力。"
                        }
                    ]
                },
                {
                    "id": "fang-2",
                    "title": "拿地助手",
                    "period": "2017年11月 - 2019年3月",
                    "position": "前端开发",
                    "category": "业务系统相关",
                    "summary": "主导土地/位置搜索页面及数据可视功能开发，实现 localStorage 持久化和高复用条件组件，集成高德地图、ECharts 实现交互与数据可视化升级。",
                    "achievements": [
                        {
                            "id": "fang-2-1",
                            "title": "用户体验提升",
                            "situation": "用户切换/保存搜索操作繁琐影响感知。",
                            "task": "提升搜索页面的易用性和交互体验。",
                            "action": "localStorage 持久化操作和交互流程优化。",
                            "result": "操作便捷性大幅提升，获得业务一致好评。"
                        },
                        {
                            "id": "fang-2-2",
                            "title": "组件标准化与开发提效",
                            "situation": "页面开发周期长，组件复用低影响协同开发。",
                            "task": "标准化交互与组件实现加快开发进度。",
                            "action": "基于 Element-UI 封装条件区组件和交互协议。",
                            "result": "开发周期缩短 30%，组件复用和标准化能力同步提升。"
                        }
                    ]
                },
                {
                    "id": "fang-3",
                    "title": "城市地图",
                    "period": "2017年11月 - 2019年3月",
                    "position": "前端开发",
                    "category": "业务系统相关",
                    "summary": "主导经济、人口、潜客大数据页面及后台接口开发，初期基于jQuery实现交互逻辑，确保页面功能稳定。集成极海地图与ECharts，完成数据可视化展示，满足业务多维度分析需求。中期引入Vue框架，开发投资立项通用条件组件及报告中心PPT下载模块，提升复用性与功能扩展性。后期采用Express框架构建Web层Controller，实现Excel文件上传与下载功能，优化数据处理效率。",
                    "achievements": [
                        {
                            "id": "fang-3-1",
                            "title": "多维数据可视化",
                            "situation": "需展示经济、人口等多维大数据。",
                            "task": "实现高效的数据可视化展示。",
                            "action": "集成极海地图与ECharts，开发多维度数据可视化页面。",
                            "result": "满足业务多维度分析需求，提升数据洞察力。"
                        },
                        {
                            "id": "fang-3-2",
                            "title": "通用组件与自动化提升",
                            "situation": "页面功能扩展性和数据处理效率需提升。",
                            "task": "提升页面复用性和数据处理自动化。",
                            "action": "引入Vue框架，开发通用条件组件和PPT下载模块，采用Express实现Excel上传下载。",
                            "result": "页面复用性增强，数据处理效率大幅提升。"
                        }
                    ]
                }
            ]
        },
        {
            "id": 4,
            "company": "深圳市天蓝色软件服务有限公司",
            "position": "Java开发",
            "location": "深圳",
            "period": "2016年7月 - 2017年9月",
            "description": "负责全栈 SaaS 项目二次开发与大数据优化，包括后端 API、数据库建模和高性能前端页面，保障个性化交付与关键性能指标提升。",
            "items": [
                {
                    "id": "tl-1",
                    "title": "SaaS项目二次开发",
                    "period": "2016年7月 - 2017年9月",
                    "position": "Java开发+全干工程师",
                    "category": "业务系统相关",
                    "summary": "独立负责 SaaS 产品定制与性能改进，包括 Java+Spring 后端开发、jQuery 前端研发和大数据批量操作模块，高质量助力行业客户提效赋能。",
                    "achievements": [
                        {
                            "id": "tl-1-1",
                            "title": "ERM系统二次开发",
                            "situation": "客户需针对 ERM 业务场景深度个性化扩展。",
                            "task": "定制业务流程和高性能数据批处理。",
                            "action": "后端 Java+Spring 多模块协同，前端 jQuery 完善交互，数据库与存储优化升级。",
                            "result": "项目提前上线，百万级数据响应显著优化，客户评价优良持续合作。"
                        }
                    ]
                }
            ]
        },
        {
            "id": 5,
            "company": "海澜集团",
            "position": "职业店长/区域主管",
            "location": "无锡",
            "period": "2014年7月 - 2016年5月",
            "description": "主导区域市场运营和新店开业流程优化，推动信息系统落地和管理数字化升级，实现业务自动化和数据决策支持。",
            "items": [
                {
                    "id": "hl-1",
                    "title": "门店进销存系统",
                    "period": "2016年2月 - 2016年5月",
                    "position": "区域主管",
                    "category": "",
                    "summary": "开发基于 Java+JSP 门店进销存系统，自动化同步仓库与门店数据，提升盘点核对与库存管理精度和自动化能力。",
                    "achievements": [
                        {
                            "id": "hl-1-1",
                            "title": "进销存流程优化",
                            "situation": "人工进销存计算易出错，月度盘点不准。",
                            "task": "自动化进销存流程减少错误。",
                            "action": "设计盘点枪自动采集和数据自动同步模块。",
                            "result": "错误率降 75%，差异率降至 0.8%，总部数据决策能力提升。"
                        }
                    ]
                },
                {
                    "id": "hl-2",
                    "title": "新店开业流程自动化",
                    "period": "2014年9月 - 2016年2月",
                    "position": "职业店长",
                    "category": "",
                    "summary": "负责优化新店开业流程，使用Java+JSP技术开发新店TODO-LIST系统，以四象限方式展示紧急/重要程度不同的任务，替代之前依靠个人经验和笔记的管理方式，提高工作效率，确保新店开业前两个月内各项任务按时完成。",
                    "achievements": [
                        {
                            "id": "hl-2-1",
                            "title": "新店TODO-LIST系统开发",
                            "situation": "新店开业前有大量繁琐的准备工作需要协调和跟踪，手工管理效率低下且容易遗漏关键事项。",
                            "task": "开发一个简单高效的任务管理系统，确保新店开业准备工作有序进行。",
                            "action": "使用Java+JSP技术开发基于Web的任务跟踪系统，采用四象限法（紧急且重要/重要不紧急/紧急不重要/既不紧急也不重要）展示任务；实现自动任务安排、提醒和统计功能；设计红黄绿三色预警机制，直观显示任务状态和紧急程度。",
                            "result": "新店筹备期任务完成率从82%提升至98%，筹备周期平均缩短3天，协调沟通时间减少60%，系统在全国35家新店开业中成功应用，获得集团表彰。"
                        }
                    ]
                }
            ]
        }
    ],
    "education": [
        {
            "id": 1,
            "degree": "学士学位",
            "field": "农业资源与环境",
            "institution": "吉林大学",
            "location": "吉林",
            "period": "2010年9月 - 2014年7月"
        }
    ],
    "portfolioProjects": [
        {
            "id": 1,
            "title": "我不知道的周刊",
            "description": "AI驱动的前端技术周刊，精选并深度解读Web前端及周边生态的优质内容，涵盖实用工具、开源项目、前沿资讯与最佳实践。采用AI技术智能分析与筛选内容，让开发者持续获取高质量的前端资讯，提升专业素养和技术视野。",
            "image": "https://img.mengpeng.tech/i/2025/04/19/68035b3218ba2.webp",
            "technologies": ["Astro", "React", "OpenAI", "Tailwind CSS", "Vercel", "MCP", "Node.js"],
            "techIds": ["astro", "react", "openai", "tailwind", "vercel", "mcp", "nodejs"],
            "liveLink": "https://weekly.mengpeng.tech",
            "repoLink": "https://github.com/NorthSeacoder/weekly",
            "featured": true,
            "evolution": ["内容手动整理", "AI辅助筛选", "OpenAI API集成", "本地MCP服务驱动"],
            "related": [4]
        },
        {
            "id": 2,
            "title": "@nsea/xmind-handler",
            "description": "专业级 XMind 内容批量处理工具，支持高效主题过滤、格式转换与多格式导出，可自动生成结构化 JSON/Markdown/精简 XMind 网络，极大提升导图内容整理和知识归档效率。",
            "image": "https://img.mengpeng.tech/i/2025/04/19/68035be67ab0d.webp",
            "technologies": ["Node.js", "TypeScript", "CLI", "XMind SDK"],
            "techIds": ["nodejs", "typescript", "cli", "xmind"],
            "liveLink": "https://www.npmjs.com/package/@nsea/xmind-handler",
            "repoLink": "https://github.com/NorthSeacoder/xmind-handler",
            "featured": true,
            "evolution": ["节点过滤", "多格式转换", "命令行工具"],
            "related": [4]
        },
        {
            "id": 3,
            "title": "@codetransformer/find-chinese",
            "description": "高效精准的多层依赖扫描和中文字符定位工具，赋能复杂前端项目的国际化改造和字符审核，提升多语种项目的开发与质量把控能力。",
            "image": "/placeholder.svg",
            "technologies": ["TypeScript", "AST", "Babel", "VSCode API"],
            "techIds": ["typescript", "ast", "babel", "vscode"],
            "liveLink": "https://www.npmjs.com/package/@codetransformer/find-chinese",
            "repoLink": "https://github.com/NorthSeacoder/codetransformer",
            "featured": true,
            "evolution": ["基础扫描", "依赖追踪", "统计分析"],
            "related": [4, 6, 7]
        },
        {
            "id": 4,
            "title": "Franky (VSCode)",
            "description": "高效开发者辅助 VSCode 扩展，支持动态模板生成、Tailwind 样式自动转换与文件头自动注释，极大提高多框架项目开发效率与一致性。",
            "image": "https://img.mengpeng.tech/i/2025/04/19/68035c8e0d607.webp",
            "technologies": ["TypeScript", "VSCode API", "Template Engine", "Tailwind CSS"],
            "techIds": ["typescript", "vscode", "template", "tailwind"],
            "liveLink": "https://marketplace.visualstudio.com/items?itemName=NorthSeacoder.franky",
            "repoLink": "https://github.com/NorthSeacoder/franky",
            "featured": true,
            "evolution": ["fileheader", "tailwind 转换", "模板系统", "动态模板"],
            "related": [7]
        },
        {
            "id": 5,
            "title": "WebBar (VSCode)",
            "description": "轻量级 VSCode 状态栏自定义按钮插件，一键集成常用网页、内部系统与工作流资源，提升开发便捷性和上下文跳转效率。",
            "image": "https://img.mengpeng.tech/i/2025/04/19/68035dec4bed3.webp",
            "technologies": ["TypeScript", "VSCode API", "WebView"],
            "techIds": ["typescript", "vscode", "webview"],
            "liveLink": "https://marketplace.visualstudio.com/items?itemName=NorthSeacoder.webbar",
            "repoLink": "https://github.com/NorthSeacoder/webbar",
            "featured": false,
            "evolution": ["固定链接", "自定义配置"],
            "related": [4]
        },
        {
            "id": 6,
            "title": "CodeTransformer (VSCode)",
            "description": "专业级代码迁移和重构 VSCode 插件，集成多层 AST 分析、依赖可视化和批量修复方案，显著提升大型项目技术升级、批量迁移和结构治理的效率与可靠性。",
            "image": "https://img.mengpeng.tech/i/2025/04/19/68035e78c6dd6.webp",
            "technologies": ["TypeScript", "Babel", "AST", "依赖分析"],
            "techIds": ["typescript", "babel", "ast", "dependency-analysis"],
            "liveLink": "https://marketplace.visualstudio.com/items?itemName=NorthSeacoder.codetransformer",
            "repoLink": "https://github.com/NorthSeacoder/codetransformer",
            "featured": true,
            "evolution": ["中文查找", "依赖图谱查找", "支持自定义扩展"],
            "related": [3, 7]
        },
        {
            "id": 7,
            "title": "@nsea/depseeker",
            "description": "深度依赖分析与递归扫描工具，支持复杂依赖全景解析和 alias 解析，辅助大型项目重构与微前端架构设计，提升项目结构透明度和协同开发效率。",
            "image": "https://img.mengpeng.tech/i/2025/04/19/68035efb9ffe6.webp",
            "technologies": ["Node.js", "TypeScript", "依赖分析", "AST"],
            "techIds": ["nodejs", "typescript", "dependency-analysis", "ast"],
            "liveLink": "https://www.npmjs.com/package/@nsea/depseeker",
            "repoLink": "https://github.com/NorthSeacoder/depseeker",
            "featured": true,
            "evolution": ["简单依赖解析", "依赖图谱解析", "支持解析 alias"],
            "related": [2, 6]
        }
    ]
}
